/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.ReposOwnerRepoIssuesLabelsModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param title The title of the issue.
 * @param body The contents of the issue.
 * @param assignee Login for the user that this issue should be assigned to. **This field is deprecated.**
 * @param state State of the issue. Either `open` or `closed`.
 * @param milestone The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._
 * @param labels Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
 * @param assignees Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
 */
@Serializable
data class InlineObject102Model(
    /* The title of the issue. */
    @SerialName(value = "title")
    val title: kotlin.String? = null,
    /* The contents of the issue. */
    @SerialName(value = "body")
    val body: kotlin.String? = null,
    /* Login for the user that this issue should be assigned to. **This field is deprecated.** */
    @SerialName(value = "assignee")
    val assignee: kotlin.String? = null,
    /* State of the issue. Either `open` or `closed`. */
    @SerialName(value = "state")
    val state: InlineObject102Model.State? = null,
    /* The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._ */
    @SerialName(value = "milestone")
    val milestone: kotlin.String? = null,
    /* Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
    @SerialName(value = "labels")
    val labels: kotlin.collections.List<ReposOwnerRepoIssuesLabelsModel>? = null,
    /* Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
    @SerialName(value = "assignees")
    val assignees: kotlin.collections.List<kotlin.String>? = null
) {

    /**
     * State of the issue. Either `open` or `closed`.
     * Values: `open`,closed
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        `open`("open"),
        closed("closed");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InlineObject102Model.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

