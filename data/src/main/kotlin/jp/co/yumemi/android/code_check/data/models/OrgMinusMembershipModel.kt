/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.NullableMinusSimpleMinusUserModel
import jp.co.yumemi.android.code_check.data.models.OrgMembershipPermissionsModel
import jp.co.yumemi.android.code_check.data.models.OrganizationMinusSimpleModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Org Membership
 * @param url 
 * @param state The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
 * @param role The user's membership type in the organization.
 * @param organizationUrl 
 * @param organization 
 * @param user 
 * @param permissions 
 */
@Serializable
data class OrgMinusMembershipModel(
    @SerialName(value = "url")
    val url: kotlin.String,
    /* The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation. */
    @SerialName(value = "state")
    val state: OrgMinusMembershipModel.State,
    /* The user's membership type in the organization. */
    @SerialName(value = "role")
    val role: OrgMinusMembershipModel.Role,
    @SerialName(value = "organization_url")
    val organizationUrl: kotlin.String,
    @SerialName(value = "organization")
    val organization: OrganizationMinusSimpleModel,
    @SerialName(value = "user")
    val user: NullableMinusSimpleMinusUserModel?,
    @SerialName(value = "permissions")
    val permissions: OrgMembershipPermissionsModel? = null
) {

    /**
     * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
     * Values: active,pending
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        active("active"),
        pending("pending");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "OrgMinusMembershipModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The user's membership type in the organization.
     * Values: admin,member,billingManager
     */
    @Serializable(with = Role.Serializer::class)
    enum class Role(val value: kotlin.String) {
        admin("admin"),
        member("member"),
        billingManager("billing_manager");

        @kotlinx.serialization.Serializer(forClass = Role::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Role {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "OrgMinusMembershipModel.Role.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Role) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

