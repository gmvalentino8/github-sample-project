/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * The permissions granted to the user-to-server access token.
 * @param actions The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
 * @param administration The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
 * @param checks The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
 * @param contents The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
 * @param deployments The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
 * @param environments The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
 * @param issues The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
 * @param metadata The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
 * @param packages The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
 * @param pages The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
 * @param pullRequests The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
 * @param repositoryHooks The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
 * @param repositoryProjects The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 * @param secretScanningAlerts The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
 * @param secrets The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
 * @param securityEvents The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
 * @param singleFile The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
 * @param statuses The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
 * @param vulnerabilityAlerts The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
 * @param workflows The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
 * @param members The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
 * @param organizationAdministration The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
 * @param organizationHooks The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
 * @param organizationPlan The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
 * @param organizationProjects The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
 * @param organizationPackages The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
 * @param organizationSecrets The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
 * @param organizationSelfHostedRunners The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
 * @param organizationUserBlocking The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
 * @param teamDiscussions The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
 */
@Serializable
data class AppMinusPermissionsModel(
    /* The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`. */
    @SerialName(value = "actions")
    val actions: AppMinusPermissionsModel.Actions? = null,
    /* The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`. */
    @SerialName(value = "administration")
    val administration: AppMinusPermissionsModel.Administration? = null,
    /* The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`. */
    @SerialName(value = "checks")
    val checks: AppMinusPermissionsModel.Checks? = null,
    /* The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`. */
    @SerialName(value = "contents")
    val contents: AppMinusPermissionsModel.Contents? = null,
    /* The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`. */
    @SerialName(value = "deployments")
    val deployments: AppMinusPermissionsModel.Deployments? = null,
    /* The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`. */
    @SerialName(value = "environments")
    val environments: AppMinusPermissionsModel.Environments? = null,
    /* The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`. */
    @SerialName(value = "issues")
    val issues: AppMinusPermissionsModel.Issues? = null,
    /* The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`. */
    @SerialName(value = "metadata")
    val metadata: AppMinusPermissionsModel.Metadata? = null,
    /* The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`. */
    @SerialName(value = "packages")
    val packages: AppMinusPermissionsModel.Packages? = null,
    /* The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`. */
    @SerialName(value = "pages")
    val pages: AppMinusPermissionsModel.Pages? = null,
    /* The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`. */
    @SerialName(value = "pull_requests")
    val pullRequests: AppMinusPermissionsModel.PullRequests? = null,
    /* The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`. */
    @SerialName(value = "repository_hooks")
    val repositoryHooks: AppMinusPermissionsModel.RepositoryHooks? = null,
    /* The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
    @SerialName(value = "repository_projects")
    val repositoryProjects: AppMinusPermissionsModel.RepositoryProjects? = null,
    /* The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`. */
    @SerialName(value = "secret_scanning_alerts")
    val secretScanningAlerts: AppMinusPermissionsModel.SecretScanningAlerts? = null,
    /* The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`. */
    @SerialName(value = "secrets")
    val secrets: AppMinusPermissionsModel.Secrets? = null,
    /* The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`. */
    @SerialName(value = "security_events")
    val securityEvents: AppMinusPermissionsModel.SecurityEvents? = null,
    /* The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`. */
    @SerialName(value = "single_file")
    val singleFile: AppMinusPermissionsModel.SingleFile? = null,
    /* The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`. */
    @SerialName(value = "statuses")
    val statuses: AppMinusPermissionsModel.Statuses? = null,
    /* The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`. */
    @SerialName(value = "vulnerability_alerts")
    val vulnerabilityAlerts: AppMinusPermissionsModel.VulnerabilityAlerts? = null,
    /* The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`. */
    @SerialName(value = "workflows")
    val workflows: AppMinusPermissionsModel.Workflows? = null,
    /* The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`. */
    @SerialName(value = "members")
    val members: AppMinusPermissionsModel.Members? = null,
    /* The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_administration")
    val organizationAdministration: AppMinusPermissionsModel.OrganizationAdministration? = null,
    /* The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_hooks")
    val organizationHooks: AppMinusPermissionsModel.OrganizationHooks? = null,
    /* The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`. */
    @SerialName(value = "organization_plan")
    val organizationPlan: AppMinusPermissionsModel.OrganizationPlan? = null,
    /* The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`. */
    @SerialName(value = "organization_projects")
    val organizationProjects: AppMinusPermissionsModel.OrganizationProjects? = null,
    /* The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_packages")
    val organizationPackages: AppMinusPermissionsModel.OrganizationPackages? = null,
    /* The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_secrets")
    val organizationSecrets: AppMinusPermissionsModel.OrganizationSecrets? = null,
    /* The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_self_hosted_runners")
    val organizationSelfHostedRunners: AppMinusPermissionsModel.OrganizationSelfHostedRunners? = null,
    /* The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`. */
    @SerialName(value = "organization_user_blocking")
    val organizationUserBlocking: AppMinusPermissionsModel.OrganizationUserBlocking? = null,
    /* The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`. */
    @SerialName(value = "team_discussions")
    val teamDiscussions: AppMinusPermissionsModel.TeamDiscussions? = null
) {

    /**
     * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Actions.Serializer::class)
    enum class Actions(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Actions::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Actions {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Actions.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Actions) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Administration.Serializer::class)
    enum class Administration(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Administration::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Administration {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Administration.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Administration) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Checks.Serializer::class)
    enum class Checks(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Checks::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Checks {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Checks.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Checks) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Contents.Serializer::class)
    enum class Contents(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Contents::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Contents {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Contents.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Contents) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Deployments.Serializer::class)
    enum class Deployments(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Deployments::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Deployments {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Deployments.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Deployments) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Environments.Serializer::class)
    enum class Environments(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Environments::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Environments {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Environments.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Environments) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Issues.Serializer::class)
    enum class Issues(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Issues::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Issues {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Issues.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Issues) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Metadata.Serializer::class)
    enum class Metadata(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Metadata::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Metadata {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Metadata.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Metadata) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Packages.Serializer::class)
    enum class Packages(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Packages::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Packages {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Packages.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Packages) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Pages.Serializer::class)
    enum class Pages(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Pages::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Pages {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Pages.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Pages) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = PullRequests.Serializer::class)
    enum class PullRequests(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = PullRequests::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): PullRequests {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.PullRequests.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: PullRequests) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = RepositoryHooks.Serializer::class)
    enum class RepositoryHooks(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = RepositoryHooks::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): RepositoryHooks {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.RepositoryHooks.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: RepositoryHooks) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
     * Values: read,write,admin
     */
    @Serializable(with = RepositoryProjects.Serializer::class)
    enum class RepositoryProjects(val value: kotlin.String) {
        read("read"),
        write("write"),
        admin("admin");

        @kotlinx.serialization.Serializer(forClass = RepositoryProjects::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): RepositoryProjects {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.RepositoryProjects.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: RepositoryProjects) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = SecretScanningAlerts.Serializer::class)
    enum class SecretScanningAlerts(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = SecretScanningAlerts::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): SecretScanningAlerts {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.SecretScanningAlerts.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: SecretScanningAlerts) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Secrets.Serializer::class)
    enum class Secrets(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Secrets::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Secrets {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Secrets.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Secrets) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = SecurityEvents.Serializer::class)
    enum class SecurityEvents(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = SecurityEvents::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): SecurityEvents {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.SecurityEvents.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: SecurityEvents) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = SingleFile.Serializer::class)
    enum class SingleFile(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = SingleFile::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): SingleFile {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.SingleFile.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: SingleFile) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Statuses.Serializer::class)
    enum class Statuses(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Statuses::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Statuses {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Statuses.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Statuses) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = VulnerabilityAlerts.Serializer::class)
    enum class VulnerabilityAlerts(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = VulnerabilityAlerts::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): VulnerabilityAlerts {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.VulnerabilityAlerts.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: VulnerabilityAlerts) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
     * Values: write
     */
    @Serializable(with = Workflows.Serializer::class)
    enum class Workflows(val value: kotlin.String) {
        write("write");

        @kotlinx.serialization.Serializer(forClass = Workflows::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Workflows {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Workflows.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Workflows) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = Members.Serializer::class)
    enum class Members(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = Members::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Members {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.Members.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Members) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationAdministration.Serializer::class)
    enum class OrganizationAdministration(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationAdministration::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationAdministration {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationAdministration.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationAdministration) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationHooks.Serializer::class)
    enum class OrganizationHooks(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationHooks::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationHooks {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationHooks.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationHooks) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
     * Values: read
     */
    @Serializable(with = OrganizationPlan.Serializer::class)
    enum class OrganizationPlan(val value: kotlin.String) {
        read("read");

        @kotlinx.serialization.Serializer(forClass = OrganizationPlan::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationPlan {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationPlan.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationPlan) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
     * Values: read,write,admin
     */
    @Serializable(with = OrganizationProjects.Serializer::class)
    enum class OrganizationProjects(val value: kotlin.String) {
        read("read"),
        write("write"),
        admin("admin");

        @kotlinx.serialization.Serializer(forClass = OrganizationProjects::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationProjects {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationProjects.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationProjects) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationPackages.Serializer::class)
    enum class OrganizationPackages(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationPackages::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationPackages {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationPackages.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationPackages) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationSecrets.Serializer::class)
    enum class OrganizationSecrets(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationSecrets::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationSecrets {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationSecrets.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationSecrets) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationSelfHostedRunners.Serializer::class)
    enum class OrganizationSelfHostedRunners(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationSelfHostedRunners::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationSelfHostedRunners {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationSelfHostedRunners.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationSelfHostedRunners) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = OrganizationUserBlocking.Serializer::class)
    enum class OrganizationUserBlocking(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = OrganizationUserBlocking::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): OrganizationUserBlocking {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.OrganizationUserBlocking.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: OrganizationUserBlocking) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
     * Values: read,write
     */
    @Serializable(with = TeamDiscussions.Serializer::class)
    enum class TeamDiscussions(val value: kotlin.String) {
        read("read"),
        write("write");

        @kotlinx.serialization.Serializer(forClass = TeamDiscussions::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): TeamDiscussions {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "AppMinusPermissionsModel.TeamDiscussions.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: TeamDiscussions) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

