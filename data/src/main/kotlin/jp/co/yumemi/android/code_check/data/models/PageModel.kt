/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.PagesMinusHttpsMinusCertificateModel
import jp.co.yumemi.android.code_check.data.models.PagesMinusSourceMinusHashModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * The configuration for GitHub Pages for a repository.
 * @param url The API address for accessing this Page resource.
 * @param status The status of the most recent build of the Page.
 * @param cname The Pages site's custom domain
 * @param custom404 Whether the Page has a custom 404 page.
 * @param protectedDomainState The state if the domain is verified
 * @param pendingDomainUnverifiedAt The timestamp when a pending domain becomes unverified.
 * @param htmlUrl The web address the Page can be accessed from.
 * @param source 
 * @param isPublic Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
 * @param httpsCertificate 
 * @param httpsEnforced Whether https is enabled on the domain
 */
@Serializable
data class PageModel(
    /* The API address for accessing this Page resource. */
    @SerialName(value = "url")
    val url: kotlin.String,
    /* The status of the most recent build of the Page. */
    @SerialName(value = "status")
    val status: PageModel.Status?,
    /* The Pages site's custom domain */
    @SerialName(value = "cname")
    val cname: kotlin.String?,
    /* Whether the Page has a custom 404 page. */
    @SerialName(value = "custom_404")
    val custom404: kotlin.Boolean = false,
    /* The state if the domain is verified */
    @SerialName(value = "protected_domain_state")
    val protectedDomainState: PageModel.ProtectedDomainState? = null,
    /* The timestamp when a pending domain becomes unverified. */
    @SerialName(value = "pending_domain_unverified_at")
    val pendingDomainUnverifiedAt: kotlin.String? = null,
    /* The web address the Page can be accessed from. */
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String? = null,
    @SerialName(value = "source")
    val source: PagesMinusSourceMinusHashModel? = null,
    /* Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
    @SerialName(value = "is_public")
    val isPublic: kotlin.Boolean? = null,
    @SerialName(value = "https_certificate")
    val httpsCertificate: PagesMinusHttpsMinusCertificateModel? = null,
    /* Whether https is enabled on the domain */
    @SerialName(value = "https_enforced")
    val httpsEnforced: kotlin.Boolean? = null
) {

    /**
     * The status of the most recent build of the Page.
     * Values: built,building,errored
     */
    @Serializable(with = Status.Serializer::class)
    enum class Status(val value: kotlin.String) {
        built("built"),
        building("building"),
        errored("errored");

        @kotlinx.serialization.Serializer(forClass = Status::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Status {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PageModel.Status.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Status) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The state if the domain is verified
     * Values: pending,verified,unverified
     */
    @Serializable(with = ProtectedDomainState.Serializer::class)
    enum class ProtectedDomainState(val value: kotlin.String) {
        pending("pending"),
        verified("verified"),
        unverified("unverified");

        @kotlinx.serialization.Serializer(forClass = ProtectedDomainState::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): ProtectedDomainState {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PageModel.ProtectedDomainState.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: ProtectedDomainState) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

