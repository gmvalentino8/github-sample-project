/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param lockReason The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam`
 */
@Serializable
data class InlineObject106Model(
    /* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam` */
    @SerialName(value = "lock_reason")
    val lockReason: InlineObject106Model.LockReason? = null
) {

    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam`
     * Values: offMinusTopic,tooHeated,resolved,spam
     */
    @Serializable(with = LockReason.Serializer::class)
    enum class LockReason(val value: kotlin.String) {
        offMinusTopic("off-topic"),
        tooHeated("too heated"),
        resolved("resolved"),
        spam("spam");

        @kotlinx.serialization.Serializer(forClass = LockReason::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): LockReason {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InlineObject106Model.LockReason.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: LockReason) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

