/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.AuthorAssociationModel
import jp.co.yumemi.android.code_check.data.models.AutoMergeModel
import jp.co.yumemi.android.code_check.data.models.NullableMinusMilestoneModel
import jp.co.yumemi.android.code_check.data.models.NullableMinusSimpleMinusUserModel
import jp.co.yumemi.android.code_check.data.models.PullRequestBaseModel
import jp.co.yumemi.android.code_check.data.models.PullRequestHeadModel
import jp.co.yumemi.android.code_check.data.models.PullRequestLabelsModel
import jp.co.yumemi.android.code_check.data.models.PullRequestSimpleLinksModel
import jp.co.yumemi.android.code_check.data.models.SimpleMinusUserModel
import jp.co.yumemi.android.code_check.data.models.TeamMinusSimpleModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 * @param url 
 * @param id 
 * @param nodeId 
 * @param htmlUrl 
 * @param diffUrl 
 * @param patchUrl 
 * @param issueUrl 
 * @param commitsUrl 
 * @param reviewCommentsUrl 
 * @param reviewCommentUrl 
 * @param commentsUrl 
 * @param statusesUrl 
 * @param number Number uniquely identifying the pull request within its repository.
 * @param state State of this Pull Request. Either `open` or `closed`.
 * @param locked 
 * @param title The title of the pull request.
 * @param user 
 * @param body 
 * @param labels 
 * @param milestone 
 * @param createdAt 
 * @param updatedAt 
 * @param closedAt 
 * @param mergedAt 
 * @param mergeCommitSha 
 * @param assignee 
 * @param head 
 * @param base 
 * @param links 
 * @param authorAssociation 
 * @param autoMerge 
 * @param merged 
 * @param mergeable 
 * @param mergeableState 
 * @param mergedBy 
 * @param comments 
 * @param reviewComments 
 * @param maintainerCanModify Indicates whether maintainers can modify the pull request.
 * @param commits 
 * @param additions 
 * @param deletions 
 * @param changedFiles 
 * @param activeLockReason 
 * @param assignees 
 * @param requestedReviewers 
 * @param requestedTeams 
 * @param draft Indicates whether or not the pull request is a draft.
 * @param rebaseable 
 */
@Serializable
data class PullMinusRequestModel(
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    @SerialName(value = "diff_url")
    val diffUrl: kotlin.String,
    @SerialName(value = "patch_url")
    val patchUrl: kotlin.String,
    @SerialName(value = "issue_url")
    val issueUrl: kotlin.String,
    @SerialName(value = "commits_url")
    val commitsUrl: kotlin.String,
    @SerialName(value = "review_comments_url")
    val reviewCommentsUrl: kotlin.String,
    @SerialName(value = "review_comment_url")
    val reviewCommentUrl: kotlin.String,
    @SerialName(value = "comments_url")
    val commentsUrl: kotlin.String,
    @SerialName(value = "statuses_url")
    val statusesUrl: kotlin.String,
    /* Number uniquely identifying the pull request within its repository. */
    @SerialName(value = "number")
    val number: kotlin.Int,
    /* State of this Pull Request. Either `open` or `closed`. */
    @SerialName(value = "state")
    val state: PullMinusRequestModel.State,
    @SerialName(value = "locked")
    val locked: kotlin.Boolean,
    /* The title of the pull request. */
    @SerialName(value = "title")
    val title: kotlin.String,
    @SerialName(value = "user")
    val user: NullableMinusSimpleMinusUserModel?,
    @SerialName(value = "body")
    val body: kotlin.String?,
    @SerialName(value = "labels")
    val labels: kotlin.collections.List<PullRequestLabelsModel>,
    @SerialName(value = "milestone")
    val milestone: NullableMinusMilestoneModel?,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    @SerialName(value = "closed_at")
    val closedAt: kotlin.String?,
    @SerialName(value = "merged_at")
    val mergedAt: kotlin.String?,
    @SerialName(value = "merge_commit_sha")
    val mergeCommitSha: kotlin.String?,
    @SerialName(value = "assignee")
    val assignee: NullableMinusSimpleMinusUserModel?,
    @SerialName(value = "head")
    val head: PullRequestHeadModel,
    @SerialName(value = "base")
    val base: PullRequestBaseModel,
    @SerialName(value = "_links")
    val links: PullRequestSimpleLinksModel,
    @Contextual @SerialName(value = "author_association")
    val authorAssociation: AuthorAssociationModel,
    @SerialName(value = "auto_merge")
    val autoMerge: AutoMergeModel?,
    @SerialName(value = "merged")
    val merged: kotlin.Boolean,
    @SerialName(value = "mergeable")
    val mergeable: kotlin.Boolean?,
    @SerialName(value = "mergeable_state")
    val mergeableState: kotlin.String,
    @SerialName(value = "merged_by")
    val mergedBy: NullableMinusSimpleMinusUserModel?,
    @SerialName(value = "comments")
    val comments: kotlin.Int,
    @SerialName(value = "review_comments")
    val reviewComments: kotlin.Int,
    /* Indicates whether maintainers can modify the pull request. */
    @SerialName(value = "maintainer_can_modify")
    val maintainerCanModify: kotlin.Boolean,
    @SerialName(value = "commits")
    val commits: kotlin.Int,
    @SerialName(value = "additions")
    val additions: kotlin.Int,
    @SerialName(value = "deletions")
    val deletions: kotlin.Int,
    @SerialName(value = "changed_files")
    val changedFiles: kotlin.Int,
    @SerialName(value = "active_lock_reason")
    val activeLockReason: kotlin.String? = null,
    @SerialName(value = "assignees")
    val assignees: kotlin.collections.List<SimpleMinusUserModel>? = null,
    @SerialName(value = "requested_reviewers")
    val requestedReviewers: kotlin.collections.List<SimpleMinusUserModel>? = null,
    @SerialName(value = "requested_teams")
    val requestedTeams: kotlin.collections.List<TeamMinusSimpleModel>? = null,
    /* Indicates whether or not the pull request is a draft. */
    @SerialName(value = "draft")
    val draft: kotlin.Boolean? = null,
    @SerialName(value = "rebaseable")
    val rebaseable: kotlin.Boolean? = null
) {

    /**
     * State of this Pull Request. Either `open` or `closed`.
     * Values: `open`,closed
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        `open`("open"),
        closed("closed");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PullMinusRequestModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

