/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.EnvironmentApprovalsEnvironmentsModel
import jp.co.yumemi.android.code_check.data.models.SimpleMinusUserModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * An entry in the reviews log for environment deployments
 * @param environments The list of environments that were approved or rejected
 * @param state Whether deployment to the environment(s) was approved or rejected
 * @param user 
 * @param comment The comment submitted with the deployment review
 */
@Serializable
data class EnvironmentMinusApprovalsModel(
    /* The list of environments that were approved or rejected */
    @SerialName(value = "environments")
    val environments: kotlin.collections.List<EnvironmentApprovalsEnvironmentsModel>,
    /* Whether deployment to the environment(s) was approved or rejected */
    @SerialName(value = "state")
    val state: EnvironmentMinusApprovalsModel.State,
    @SerialName(value = "user")
    val user: SimpleMinusUserModel,
    /* The comment submitted with the deployment review */
    @SerialName(value = "comment")
    val comment: kotlin.String
) {

    /**
     * Whether deployment to the environment(s) was approved or rejected
     * Values: approved,rejected
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        approved("approved"),
        rejected("rejected");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "EnvironmentMinusApprovalsModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

