/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.MinimalMinusRepositoryModel
import jp.co.yumemi.android.code_check.data.models.NullableMinusIntegrationModel
import jp.co.yumemi.android.code_check.data.models.PullMinusRequestMinusMinimalModel
import jp.co.yumemi.android.code_check.data.models.SimpleMinusCommitModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * A suite of checks performed on the code of a given code change
 * @param id 
 * @param nodeId 
 * @param headBranch 
 * @param headSha The SHA of the head commit that is being checked.
 * @param status 
 * @param conclusion 
 * @param url 
 * @param before 
 * @param after 
 * @param pullRequests 
 * @param app 
 * @param repository 
 * @param createdAt 
 * @param updatedAt 
 * @param headCommit 
 * @param latestCheckRunsCount 
 * @param checkRunsUrl 
 * @param rerequestable 
 * @param runsRerequestable 
 */
@Serializable
data class CheckMinusSuiteModel(
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    @SerialName(value = "head_branch")
    val headBranch: kotlin.String?,
    /* The SHA of the head commit that is being checked. */
    @SerialName(value = "head_sha")
    val headSha: kotlin.String,
    @SerialName(value = "status")
    val status: CheckMinusSuiteModel.Status?,
    @SerialName(value = "conclusion")
    val conclusion: CheckMinusSuiteModel.Conclusion?,
    @SerialName(value = "url")
    val url: kotlin.String?,
    @SerialName(value = "before")
    val before: kotlin.String?,
    @SerialName(value = "after")
    val after: kotlin.String?,
    @SerialName(value = "pull_requests")
    val pullRequests: kotlin.collections.List<PullMinusRequestMinusMinimalModel>?,
    @SerialName(value = "app")
    val app: NullableMinusIntegrationModel?,
    @SerialName(value = "repository")
    val repository: MinimalMinusRepositoryModel,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String?,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String?,
    @SerialName(value = "head_commit")
    val headCommit: SimpleMinusCommitModel,
    @SerialName(value = "latest_check_runs_count")
    val latestCheckRunsCount: kotlin.Int,
    @SerialName(value = "check_runs_url")
    val checkRunsUrl: kotlin.String,
    @SerialName(value = "rerequestable")
    val rerequestable: kotlin.Boolean? = null,
    @SerialName(value = "runs_rerequestable")
    val runsRerequestable: kotlin.Boolean? = null
) {

    /**
     * 
     * Values: queued,inProgress,completed
     */
    @Serializable(with = Status.Serializer::class)
    enum class Status(val value: kotlin.String) {
        queued("queued"),
        inProgress("in_progress"),
        completed("completed");

        @kotlinx.serialization.Serializer(forClass = Status::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Status {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CheckMinusSuiteModel.Status.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Status) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * 
     * Values: success,failure,neutral,cancelled,skipped,timedOut,actionRequired
     */
    @Serializable(with = Conclusion.Serializer::class)
    enum class Conclusion(val value: kotlin.String) {
        success("success"),
        failure("failure"),
        neutral("neutral"),
        cancelled("cancelled"),
        skipped("skipped"),
        timedOut("timed_out"),
        actionRequired("action_required");

        @kotlinx.serialization.Serializer(forClass = Conclusion::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Conclusion {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CheckMinusSuiteModel.Conclusion.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Conclusion) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

