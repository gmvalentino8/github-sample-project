/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param id A unique identifier for the rule used to detect the alert.
 * @param name The name of the rule used to detect the alert.
 * @param severity The severity of the alert.
 * @param securitySeverityLevel The security severity of the alert.
 * @param description A short description of the rule used to detect the alert.
 * @param fullDescription description of the rule used to detect the alert.
 * @param tags A set of tags applicable for the rule.
 * @param help Detailed documentation for the rule as GitHub Flavored Markdown.
 */
@Serializable
data class CodeMinusScanningMinusAlertMinusRuleModel(
    /* A unique identifier for the rule used to detect the alert. */
    @SerialName(value = "id")
    val id: kotlin.String? = null,
    /* The name of the rule used to detect the alert. */
    @SerialName(value = "name")
    val name: kotlin.String? = null,
    /* The severity of the alert. */
    @SerialName(value = "severity")
    val severity: CodeMinusScanningMinusAlertMinusRuleModel.Severity? = null,
    /* The security severity of the alert. */
    @SerialName(value = "security_severity_level")
    val securitySeverityLevel: CodeMinusScanningMinusAlertMinusRuleModel.SecuritySeverityLevel? = null,
    /* A short description of the rule used to detect the alert. */
    @SerialName(value = "description")
    val description: kotlin.String? = null,
    /* description of the rule used to detect the alert. */
    @SerialName(value = "full_description")
    val fullDescription: kotlin.String? = null,
    /* A set of tags applicable for the rule. */
    @SerialName(value = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,
    /* Detailed documentation for the rule as GitHub Flavored Markdown. */
    @SerialName(value = "help")
    val help: kotlin.String? = null
) {

    /**
     * The severity of the alert.
     * Values: none,note,warning,error
     */
    @Serializable(with = Severity.Serializer::class)
    enum class Severity(val value: kotlin.String) {
        none("none"),
        note("note"),
        warning("warning"),
        error("error");

        @kotlinx.serialization.Serializer(forClass = Severity::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Severity {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CodeMinusScanningMinusAlertMinusRuleModel.Severity.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Severity) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The security severity of the alert.
     * Values: low,medium,high,critical
     */
    @Serializable(with = SecuritySeverityLevel.Serializer::class)
    enum class SecuritySeverityLevel(val value: kotlin.String) {
        low("low"),
        medium("medium"),
        high("high"),
        critical("critical");

        @kotlinx.serialization.Serializer(forClass = SecuritySeverityLevel::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): SecuritySeverityLevel {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CodeMinusScanningMinusAlertMinusRuleModel.SecuritySeverityLevel.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: SecuritySeverityLevel) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

