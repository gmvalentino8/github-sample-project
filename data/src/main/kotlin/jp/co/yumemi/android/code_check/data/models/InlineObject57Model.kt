/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.data.models

import jp.co.yumemi.android.code_check.data.models.ReposOwnerRepoSecurityAndAnalysisModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param name The name of the repository.
 * @param description A short description of the repository.
 * @param homepage A URL with more information about the repository.
 * @param `private` Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
 * @param visibility Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"
 * @param securityAndAnalysis 
 * @param hasIssues Either `true` to enable issues for this repository or `false` to disable them.
 * @param hasProjects Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
 * @param hasWiki Either `true` to enable the wiki for this repository or `false` to disable it.
 * @param isTemplate Either `true` to make this repo available as a template repository or `false` to prevent it.
 * @param defaultBranch Updates the default branch for this repository.
 * @param allowSquashMerge Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
 * @param allowMergeCommit Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
 * @param allowRebaseMerge Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
 * @param allowAutoMerge Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
 * @param deleteBranchOnMerge Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
 * @param archived `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
 * @param allowForking Either `true` to allow private forks, or `false` to prevent private forks.
 */
@Serializable
data class InlineObject57Model(
    /* The name of the repository. */
    @SerialName(value = "name")
    val name: kotlin.String? = null,
    /* A short description of the repository. */
    @SerialName(value = "description")
    val description: kotlin.String? = null,
    /* A URL with more information about the repository. */
    @SerialName(value = "homepage")
    val homepage: kotlin.String? = null,
    /* Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. */
    @SerialName(value = "private")
    val `private`: kotlin.Boolean? = false,
    /* Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\" */
    @SerialName(value = "visibility")
    val visibility: InlineObject57Model.Visibility? = null,
    @SerialName(value = "security_and_analysis")
    val securityAndAnalysis: ReposOwnerRepoSecurityAndAnalysisModel? = null,
    /* Either `true` to enable issues for this repository or `false` to disable them. */
    @SerialName(value = "has_issues")
    val hasIssues: kotlin.Boolean? = true,
    /* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
    @SerialName(value = "has_projects")
    val hasProjects: kotlin.Boolean? = true,
    /* Either `true` to enable the wiki for this repository or `false` to disable it. */
    @SerialName(value = "has_wiki")
    val hasWiki: kotlin.Boolean? = true,
    /* Either `true` to make this repo available as a template repository or `false` to prevent it. */
    @SerialName(value = "is_template")
    val isTemplate: kotlin.Boolean? = false,
    /* Updates the default branch for this repository. */
    @SerialName(value = "default_branch")
    val defaultBranch: kotlin.String? = null,
    /* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
    @SerialName(value = "allow_squash_merge")
    val allowSquashMerge: kotlin.Boolean? = true,
    /* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
    @SerialName(value = "allow_merge_commit")
    val allowMergeCommit: kotlin.Boolean? = true,
    /* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
    @SerialName(value = "allow_rebase_merge")
    val allowRebaseMerge: kotlin.Boolean? = true,
    /* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. */
    @SerialName(value = "allow_auto_merge")
    val allowAutoMerge: kotlin.Boolean? = false,
    /* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
    @SerialName(value = "delete_branch_on_merge")
    val deleteBranchOnMerge: kotlin.Boolean? = false,
    /* `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
    @SerialName(value = "archived")
    val archived: kotlin.Boolean? = false,
    /* Either `true` to allow private forks, or `false` to prevent private forks. */
    @SerialName(value = "allow_forking")
    val allowForking: kotlin.Boolean? = false
) {

    /**
     * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"
     * Values: `public`,`private`,`internal`
     */
    @Serializable(with = Visibility.Serializer::class)
    enum class Visibility(val value: kotlin.String) {
        `public`("public"),
        `private`("private"),
        `internal`("internal");

        @kotlinx.serialization.Serializer(forClass = Visibility::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Visibility {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InlineObject57Model.Visibility.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Visibility) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

