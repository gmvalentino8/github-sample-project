/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.models

import io.github.gmvalentino8.github.sample.remote.models.ReactionMinusRollupApiModel
import io.github.gmvalentino8.github.sample.remote.models.ReleaseMinusAssetApiModel
import io.github.gmvalentino8.github.sample.remote.models.SimpleMinusUserApiModel

import kotlinx.serialization.*

/**
 * A release.
 * @param url 
 * @param htmlUrl 
 * @param assetsUrl 
 * @param uploadUrl 
 * @param tarballUrl 
 * @param zipballUrl 
 * @param id 
 * @param nodeId 
 * @param tagName The name of the tag.
 * @param targetCommitish Specifies the commitish value that determines where the Git tag is created from.
 * @param name 
 * @param draft true to create a draft (unpublished) release, false to create a published one.
 * @param prerelease Whether to identify the release as a prerelease or a full release.
 * @param createdAt 
 * @param publishedAt 
 * @param author 
 * @param assets 
 * @param body 
 * @param bodyHtml 
 * @param bodyText 
 * @param mentionsCount 
 * @param discussionUrl The URL of the release discussion.
 * @param reactions 
 */
@Serializable
data class ReleaseApiModel(
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    @SerialName(value = "assets_url")
    val assetsUrl: kotlin.String,
    @SerialName(value = "upload_url")
    val uploadUrl: kotlin.String,
    @SerialName(value = "tarball_url")
    val tarballUrl: kotlin.String?,
    @SerialName(value = "zipball_url")
    val zipballUrl: kotlin.String?,
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    /* The name of the tag. */
    @SerialName(value = "tag_name")
    val tagName: kotlin.String,
    /* Specifies the commitish value that determines where the Git tag is created from. */
    @SerialName(value = "target_commitish")
    val targetCommitish: kotlin.String,
    @SerialName(value = "name")
    val name: kotlin.String?,
    /* true to create a draft (unpublished) release, false to create a published one. */
    @SerialName(value = "draft")
    val draft: kotlin.Boolean,
    /* Whether to identify the release as a prerelease or a full release. */
    @SerialName(value = "prerelease")
    val prerelease: kotlin.Boolean,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "published_at")
    val publishedAt: kotlin.String?,
    @SerialName(value = "author")
    val author: SimpleMinusUserApiModel,
    @SerialName(value = "assets")
    val assets: kotlin.collections.List<ReleaseMinusAssetApiModel>,
    @SerialName(value = "body")
    val body: kotlin.String? = null,
    @SerialName(value = "body_html")
    val bodyHtml: kotlin.String? = null,
    @SerialName(value = "body_text")
    val bodyText: kotlin.String? = null,
    @SerialName(value = "mentions_count")
    val mentionsCount: kotlin.Int? = null,
    /* The URL of the release discussion. */
    @SerialName(value = "discussion_url")
    val discussionUrl: kotlin.String? = null,
    @SerialName(value = "reactions")
    val reactions: ReactionMinusRollupApiModel? = null
) {

}

