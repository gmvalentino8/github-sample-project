/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.apis

import io.ktor.client.request.request
import io.github.gmvalentino8.github.sample.remote.models.*
import io.github.gmvalentino8.github.sample.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface ReposApi {
    /**
    * Accept a repository invitation
    *
    * 
    *
    * @return void
    */
    suspend fun reposAcceptInvitationForAuthenticatedUser(accessToken: String? = null, invitationId: kotlin.Int)

    /**
    * Add a repository collaborator
    *
    * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  For more information on permission levels, see \&quot;[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;. There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  &#x60;&#x60;&#x60; Cannot assign {member} permission of {role name} &#x60;&#x60;&#x60;  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
    *
    * @param request  (optional)
    * @return RepositoryMinusInvitationApiModel
    */
    suspend fun reposAddCollaborator(accessToken: String? = null, repoName: kotlin.String, username: kotlin.String, request: InlineObject74ApiModel): RepositoryMinusInvitationApiModel

    /**
    * Check if a user is a repository collaborator
    *
    * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  You must authenticate using an access token with the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes with push access to use this endpoint. GitHub Apps must have the &#x60;members&#x60; organization permission and &#x60;metadata&#x60; repository permission to use this endpoint.
    *
    * @return void
    */
    suspend fun reposCheckCollaborator(accessToken: String? = null, repoName: kotlin.String, username: kotlin.String)

    /**
    * Check if vulnerability alerts are enabled for a repository
    *
    * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
    *
    * @return void
    */
    suspend fun reposCheckVulnerabilityAlerts(accessToken: String? = null, repoName: kotlin.String)

    /**
    * List CODEOWNERS errors
    *
    * List any syntax errors that are detected in the CODEOWNERS file.  For more information about the correct CODEOWNERS syntax, see \&quot;[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\&quot;
    *
    * @return CodeownersMinusErrorsApiModel
    */
    suspend fun reposCodeownersErrors(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String? = null): CodeownersMinusErrorsApiModel

    /**
    * Compare two commits
    *
    * The &#x60;basehead&#x60; param is comprised of two parts: &#x60;base&#x60; and &#x60;head&#x60;. Both must be branch names in &#x60;repo&#x60;. To compare branches across other repositories in the same network as &#x60;repo&#x60;, use the format &#x60;&lt;USERNAME&gt;:branch&#x60;.  The response from the API is equivalent to running the &#x60;git log base..head&#x60; command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.  **Working with large comparisons**  To process a response with a large number of commits, you can use (&#x60;per_page&#x60; or &#x60;page&#x60;) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see \&quot;[Traversing with pagination](/rest/guides/traversing-with-pagination).\&quot;  When calling this API without any paging parameters (&#x60;per_page&#x60; or &#x60;page&#x60;), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
    *
    * @return CommitMinusComparisonApiModel
    */
    suspend fun reposCompareCommits(accessToken: String? = null, repoName: kotlin.String, basehead: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): CommitMinusComparisonApiModel

    /**
    * Create an autolink reference for a repository
    *
    * Users with admin access to the repository can create an autolink.
    *
    * @param request 
    * @return AutolinkApiModel
    */
    suspend fun reposCreateAutolink(accessToken: String? = null, repoName: kotlin.String, request: InlineObject64ApiModel): AutolinkApiModel

    /**
    * Create a commit comment
    *
    * Create a comment for a commit using its &#x60;:commit_sha&#x60;.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    *
    * @param request 
    * @return CommitMinusCommentApiModel
    */
    suspend fun reposCreateCommitComment(accessToken: String? = null, repoName: kotlin.String, commitSha: kotlin.String, request: InlineObject77ApiModel): CommitMinusCommentApiModel

    /**
    * Create commit signature protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
    *
    * @return ProtectedMinusBranchMinusAdminMinusEnforcedApiModel
    */
    suspend fun reposCreateCommitSignatureProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel

    /**
    * Create a commit status
    *
    * Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.
    *
    * @param request 
    * @return StatusApiModel
    */
    suspend fun reposCreateCommitStatus(accessToken: String? = null, repoName: kotlin.String, sha: kotlin.String, request: InlineObject136ApiModel): StatusApiModel

    /**
    * Create a deploy key
    *
    * You can create a read-only deploy key.
    *
    * @param request 
    * @return DeployMinusKeyApiModel
    */
    suspend fun reposCreateDeployKey(accessToken: String? = null, repoName: kotlin.String, request: InlineObject108ApiModel): DeployMinusKeyApiModel

    /**
    * Create a deployment
    *
    * Deployments offer a few configurable parameters with certain defaults.  The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.  The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.  The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#39;s default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/rest/reference/commits#commit-statuses) for every submitted context must be in a &#x60;success&#x60; state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#39;t be merged into the branch that&#39;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.  #### Failed commit status checks This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60; status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.
    *
    * @param request 
    * @return DeploymentApiModel
    */
    suspend fun reposCreateDeployment(accessToken: String? = null, repoName: kotlin.String, request: InlineObject81ApiModel): DeploymentApiModel

    /**
    * Create a deployment status
    *
    * Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.  GitHub Apps require &#x60;read &amp; write&#x60; access to \&quot;Deployments\&quot; and &#x60;read-only&#x60; access to \&quot;Repo contents\&quot; (for private repos). OAuth Apps require the &#x60;repo_deployment&#x60; scope.
    *
    * @param request 
    * @return DeploymentMinusStatusApiModel
    */
    suspend fun reposCreateDeploymentStatus(accessToken: String? = null, repoName: kotlin.String, deploymentId: kotlin.Int, request: InlineObject82ApiModel): DeploymentMinusStatusApiModel

    /**
    * Create a repository for the authenticated user
    *
    * Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository.
    *
    * @param request 
    * @return RepositoryApiModel
    */
    suspend fun reposCreateForAuthenticatedUser(accessToken: String? = null, request: InlineObject171ApiModel): RepositoryApiModel

    /**
    * Create a fork
    *
    * Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).
    *
    * @param request  (optional)
    * @return FullMinusRepositoryApiModel
    */
    suspend fun reposCreateFork(accessToken: String? = null, repoName: kotlin.String, request: InlineObject84ApiModel): FullMinusRepositoryApiModel

    /**
    * Create an organization repository
    *
    * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
    *
    * @param request 
    * @return RepositoryApiModel
    */
    suspend fun reposCreateInOrg(accessToken: String? = null, org: kotlin.String, request: InlineObject36ApiModel): RepositoryApiModel

    /**
    * Create or update an environment
    *
    * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \&quot;[Environments](/actions/reference/environments#environment-protection-rules).\&quot;  **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see \&quot;[Environments](/actions/reference/environments#deployment-branches).\&quot;  **Note:** To create or update secrets for an environment, see \&quot;[Secrets](/rest/reference/actions#secrets).\&quot;  You must authenticate using an access token with the repo scope to use this endpoint.
    *
    * @param request  (optional)
    * @return EnvironmentApiModel
    */
    suspend fun reposCreateOrUpdateEnvironment(accessToken: String? = null, repoName: kotlin.String, environmentName: kotlin.String, request: InlineObject83ApiModel): EnvironmentApiModel

    /**
    * Create or update file contents
    *
    * Creates a new file or replaces an existing file in a repository.
    *
    * @param request 
    * @return FileMinusCommitApiModel
    */
    suspend fun reposCreateOrUpdateFileContents(accessToken: String? = null, repoName: kotlin.String, path: kotlin.String, request: InlineObject78ApiModel): FileMinusCommitApiModel

    /**
    * Create a release
    *
    * Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    *
    * @param request 
    * @return ReleaseApiModel
    */
    suspend fun reposCreateRelease(accessToken: String? = null, repoName: kotlin.String, request: InlineObject130ApiModel): ReleaseApiModel

    /**
    * Create a repository using a template
    *
    * Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#39;s information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
    *
    * @param request 
    * @return RepositoryApiModel
    */
    suspend fun reposCreateUsingTemplate(accessToken: String? = null, templateOwner: kotlin.String, templateRepo: kotlin.String, request: InlineObject140ApiModel): RepositoryApiModel

    /**
    * Create a repository webhook
    *
    * Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.
    *
    * @param request  (optional)
    * @return HookApiModel
    */
    suspend fun reposCreateWebhook(accessToken: String? = null, repoName: kotlin.String, request: InlineObject91ApiModel): HookApiModel

    /**
    * Decline a repository invitation
    *
    * 
    *
    * @return void
    */
    suspend fun reposDeclineInvitationForAuthenticatedUser(accessToken: String? = null, invitationId: kotlin.Int)

    /**
    * Delete a repository
    *
    * Deleting a repository requires admin access. If OAuth is used, the &#x60;delete_repo&#x60; scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a &#x60;403 Forbidden&#x60; response.
    *
    * @return void
    */
    suspend fun reposDelete(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Delete access restrictions
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
    *
    * @return void
    */
    suspend fun reposDeleteAccessRestrictions(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Delete admin branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    *
    * @return void
    */
    suspend fun reposDeleteAdminBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Delete an environment
    *
    * You must authenticate using an access token with the repo scope to use this endpoint.
    *
    * @return void
    */
    suspend fun reposDeleteAnEnvironment(accessToken: String? = null, repoName: kotlin.String, environmentName: kotlin.String)

    /**
    * Delete an autolink reference from a repository
    *
    * This deletes a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.
    *
    * @return void
    */
    suspend fun reposDeleteAutolink(accessToken: String? = null, repoName: kotlin.String, autolinkId: kotlin.Int)

    /**
    * Delete branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return void
    */
    suspend fun reposDeleteBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Delete a commit comment
    *
    * 
    *
    * @return void
    */
    suspend fun reposDeleteCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int)

    /**
    * Delete commit signature protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
    *
    * @return void
    */
    suspend fun reposDeleteCommitSignatureProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Delete a deploy key
    *
    * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
    *
    * @return void
    */
    suspend fun reposDeleteDeployKey(accessToken: String? = null, repoName: kotlin.String, keyId: kotlin.Int)

    /**
    * Delete a deployment
    *
    * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can delete a deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \&quot;[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\&quot; and \&quot;[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\&quot;
    *
    * @return void
    */
    suspend fun reposDeleteDeployment(accessToken: String? = null, repoName: kotlin.String, deploymentId: kotlin.Int)

    /**
    * Delete a file
    *
    * Deletes a file in a repository.  You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.  The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#39;s information is used.  You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#39;ll receive a &#x60;422&#x60; status code.
    *
    * @param request 
    * @return FileMinusCommitApiModel
    */
    suspend fun reposDeleteFile(accessToken: String? = null, repoName: kotlin.String, path: kotlin.String, request: InlineObject79ApiModel): FileMinusCommitApiModel

    /**
    * Delete a repository invitation
    *
    * 
    *
    * @return void
    */
    suspend fun reposDeleteInvitation(accessToken: String? = null, repoName: kotlin.String, invitationId: kotlin.Int)

    /**
    * Delete pull request review protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return void
    */
    suspend fun reposDeletePullRequestReviewProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Delete a release
    *
    * Users with push access to the repository can delete a release.
    *
    * @return void
    */
    suspend fun reposDeleteRelease(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int)

    /**
    * Delete a release asset
    *
    * 
    *
    * @return void
    */
    suspend fun reposDeleteReleaseAsset(accessToken: String? = null, repoName: kotlin.String, assetId: kotlin.Int)

    /**
    * Delete a repository webhook
    *
    * 
    *
    * @return void
    */
    suspend fun reposDeleteWebhook(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int)

    /**
    * Disable automated security fixes
    *
    * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\&quot;.
    *
    * @return void
    */
    suspend fun reposDisableAutomatedSecurityFixes(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Disable Git LFS for a repository
    *
    * 
    *
    * @return void
    */
    suspend fun reposDisableLfsForRepo(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Disable vulnerability alerts
    *
    * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
    *
    * @return void
    */
    suspend fun reposDisableVulnerabilityAlerts(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Download a repository archive (tar)
    *
    * Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
    *
    * @return void
    */
    suspend fun reposDownloadTarballArchive(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String)

    /**
    * Download a repository archive (zip)
    *
    * Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
    *
    * @return void
    */
    suspend fun reposDownloadZipballArchive(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String)

    /**
    * Enable automated security fixes
    *
    * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)\&quot;.
    *
    * @return void
    */
    suspend fun reposEnableAutomatedSecurityFixes(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Enable Git LFS for a repository
    *
    * 
    *
    * @return kotlin.Any
    */
    suspend fun reposEnableLfsForRepo(accessToken: String? = null, repoName: kotlin.String): kotlin.Any

    /**
    * Enable vulnerability alerts
    *
    * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
    *
    * @return void
    */
    suspend fun reposEnableVulnerabilityAlerts(accessToken: String? = null, repoName: kotlin.String)

    /**
    * Generate release notes content for a release
    *
    * Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
    *
    * @param request 
    * @return ReleaseMinusNotesMinusContentApiModel
    */
    suspend fun reposGenerateReleaseNotes(accessToken: String? = null, repoName: kotlin.String, request: InlineObject132ApiModel): ReleaseMinusNotesMinusContentApiModel

    /**
    * Get a repository
    *
    * The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.
    *
    * @return FullMinusRepositoryApiModel
    */
    suspend fun reposGet(accessToken: String? = null, repoName: kotlin.String): FullMinusRepositoryApiModel

    /**
    * Get access restrictions
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.
    *
    * @return BranchMinusRestrictionMinusPolicyApiModel
    */
    suspend fun reposGetAccessRestrictions(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): BranchMinusRestrictionMinusPolicyApiModel

    /**
    * Get admin branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return ProtectedMinusBranchMinusAdminMinusEnforcedApiModel
    */
    suspend fun reposGetAdminBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel

    /**
    * Get all environments
    *
    * Get all environments for a repository.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return InlineResponse20023ApiModel
    */
    suspend fun reposGetAllEnvironments(accessToken: String? = null, repoName: kotlin.String): InlineResponse20023ApiModel

    /**
    * Get all repository topics
    *
    * 
    *
    * @return TopicApiModel
    */
    suspend fun reposGetAllTopics(accessToken: String? = null, repoName: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): TopicApiModel

    /**
    * Get an autolink reference of a repository
    *
    * This returns a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.
    *
    * @return AutolinkApiModel
    */
    suspend fun reposGetAutolink(accessToken: String? = null, repoName: kotlin.String, autolinkId: kotlin.Int): AutolinkApiModel

    /**
    * Get a branch
    *
    * 
    *
    * @return BranchMinusWithMinusProtectionApiModel
    */
    suspend fun reposGetBranch(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): BranchMinusWithMinusProtectionApiModel

    /**
    * Get branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return BranchMinusProtectionApiModel
    */
    suspend fun reposGetBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): BranchMinusProtectionApiModel

    /**
    * Get repository clones
    *
    * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    *
    * @return CloneMinusTrafficApiModel
    */
    suspend fun reposGetClones(accessToken: String? = null, repoName: kotlin.String, per: kotlin.String? = null): CloneMinusTrafficApiModel

    /**
    * Get repository permissions for a user
    *
    * Checks the repository permission of a collaborator. The possible repository permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.
    *
    * @return RepositoryMinusCollaboratorMinusPermissionApiModel
    */
    suspend fun reposGetCollaboratorPermissionLevel(accessToken: String? = null, repoName: kotlin.String, username: kotlin.String): RepositoryMinusCollaboratorMinusPermissionApiModel

    /**
    * Get the combined status for a specific reference
    *
    * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.   Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:  *   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60; *   **pending** if there are no statuses or a context is &#x60;pending&#x60; *   **success** if the latest status for all contexts is &#x60;success&#x60;
    *
    * @return CombinedMinusCommitMinusStatusApiModel
    */
    suspend fun reposGetCombinedStatusForRef(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): CombinedMinusCommitMinusStatusApiModel

    /**
    * Get a commit
    *
    * Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch &#x60;diff&#x60; and &#x60;patch&#x60; formats. Diffs with binary data will have no &#x60;patch&#x60; property.  To return only the SHA-1 hash of the commit reference, you can provide the &#x60;sha&#x60; custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the &#x60;Accept&#x60; header. You can use this endpoint to check if a remote reference&#39;s SHA-1 hash is the same as your local reference&#39;s SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
    *
    * @return CommitApiModel
    */
    suspend fun reposGetCommit(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): CommitApiModel

    /**
    * Get the last year of commit activity
    *
    * Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.
    *
    * @return kotlin.collections.List<CommitMinusActivityApiModel>
    */
    suspend fun reposGetCommitActivityStats(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.List<CommitMinusActivityApiModel>

    /**
    * Get a commit comment
    *
    * 
    *
    * @return CommitMinusCommentApiModel
    */
    suspend fun reposGetCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int): CommitMinusCommentApiModel

    /**
    * Get commit signature protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
    *
    * @return ProtectedMinusBranchMinusAdminMinusEnforcedApiModel
    */
    suspend fun reposGetCommitSignatureProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel

    /**
    * Get community profile metrics
    *
    * This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.  The &#x60;health_percentage&#x60; score is defined as a percentage of how many of these four documents are present: README, CONTRIBUTING, LICENSE, and CODE_OF_CONDUCT. For example, if all four documents are present, then the &#x60;health_percentage&#x60; is &#x60;100&#x60;. If only one is present, then the &#x60;health_percentage&#x60; is &#x60;25&#x60;.  &#x60;content_reports_enabled&#x60; is only returned for organization-owned repositories.
    *
    * @return CommunityMinusProfileApiModel
    */
    suspend fun reposGetCommunityProfileMetrics(accessToken: String? = null, repoName: kotlin.String): CommunityMinusProfileApiModel

    /**
    * Get repository content
    *
    * Gets the contents of a file or directory in a repository. Specify the file path or directory in &#x60;:path&#x60;. If you omit &#x60;:path&#x60;, you will receive the contents of the repository&#39;s root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository&#39;s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \&quot;type\&quot; specified as \&quot;file\&quot;. Logically, the value _should_ be \&quot;submodule\&quot;. This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \&quot;submodule\&quot;.  #### If the content is a symlink  If the requested &#x60;:path&#x60; points to a symlink, and the symlink&#39;s target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The &#x60;submodule_git_url&#x60; identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[\&quot;git\&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[\&quot;html\&quot;]&#x60;) will have null values.
    *
    * @return ContentMinusTreeApiModel
    */
    suspend fun reposGetContent(accessToken: String? = null, repoName: kotlin.String, path: kotlin.String, ref: kotlin.String? = null): ContentMinusTreeApiModel

    /**
    * Get all contributor commit activity
    *
    *  Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:  *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits
    *
    * @return kotlin.collections.List<ContributorMinusActivityApiModel>
    */
    suspend fun reposGetContributorsStats(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.List<ContributorMinusActivityApiModel>

    /**
    * Get a deploy key
    *
    * 
    *
    * @return DeployMinusKeyApiModel
    */
    suspend fun reposGetDeployKey(accessToken: String? = null, repoName: kotlin.String, keyId: kotlin.Int): DeployMinusKeyApiModel

    /**
    * Get a deployment
    *
    * 
    *
    * @return DeploymentApiModel
    */
    suspend fun reposGetDeployment(accessToken: String? = null, repoName: kotlin.String, deploymentId: kotlin.Int): DeploymentApiModel

    /**
    * Get a deployment status
    *
    * Users with pull access can view a deployment status for a deployment:
    *
    * @return DeploymentMinusStatusApiModel
    */
    suspend fun reposGetDeploymentStatus(accessToken: String? = null, repoName: kotlin.String, deploymentId: kotlin.Int, statusId: kotlin.Int): DeploymentMinusStatusApiModel

    /**
    * Get an environment
    *
    * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return EnvironmentApiModel
    */
    suspend fun reposGetEnvironment(accessToken: String? = null, repoName: kotlin.String, environmentName: kotlin.String): EnvironmentApiModel

    /**
    * Get latest Pages build
    *
    * 
    *
    * @return PageMinusBuildApiModel
    */
    suspend fun reposGetLatestPagesBuild(accessToken: String? = null, repoName: kotlin.String): PageMinusBuildApiModel

    /**
    * Get the latest release
    *
    * View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    *
    * @return ReleaseApiModel
    */
    suspend fun reposGetLatestRelease(accessToken: String? = null, repoName: kotlin.String): ReleaseApiModel

    /**
    * Get GitHub Pages build
    *
    * 
    *
    * @return PageMinusBuildApiModel
    */
    suspend fun reposGetPagesBuild(accessToken: String? = null, repoName: kotlin.String, buildId: kotlin.Int): PageMinusBuildApiModel

    /**
    * Get a DNS health check for GitHub Pages
    *
    * Gets a health check of the DNS settings for the &#x60;CNAME&#x60; record configured for a repository&#39;s GitHub Pages.  The first request to this endpoint returns a &#x60;202 Accepted&#x60; status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a &#x60;200 OK&#x60; status with the health check results in the response.  Users must have admin or owner permissions. GitHub Apps must have the &#x60;pages:write&#x60; and &#x60;administration:write&#x60; permission to use this endpoint.
    *
    * @return PagesMinusHealthMinusCheckApiModel
    */
    suspend fun reposGetPagesHealthCheck(accessToken: String? = null, repoName: kotlin.String): PagesMinusHealthMinusCheckApiModel

    /**
    * Get the weekly commit count
    *
    * Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#39;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.  The array order is oldest week (index 0) to most recent week.
    *
    * @return ParticipationMinusStatsApiModel
    */
    suspend fun reposGetParticipationStats(accessToken: String? = null, repoName: kotlin.String): ParticipationMinusStatsApiModel

    /**
    * Get pull request review protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel
    */
    suspend fun reposGetPullRequestReviewProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel

    /**
    * Get the hourly commit count for each day
    *
    * Each array contains the day number, hour number, and number of commits:  *   &#x60;0-6&#x60;: Sunday - Saturday *   &#x60;0-23&#x60;: Hour of day *   Number of commits  For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
    *
    * @return kotlin.collections.List<kotlin.collections.List<kotlin.Int>>
    */
    suspend fun reposGetPunchCardStats(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.List<kotlin.collections.List<kotlin.Int>>

    /**
    * Get a repository README
    *
    * Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
    *
    * @return ContentMinusFileApiModel
    */
    suspend fun reposGetReadme(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String? = null): ContentMinusFileApiModel

    /**
    * Get a repository README for a directory
    *
    * Gets the README from a repository directory.  READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
    *
    * @return ContentMinusFileApiModel
    */
    suspend fun reposGetReadmeInDirectory(accessToken: String? = null, repoName: kotlin.String, dir: kotlin.String, ref: kotlin.String? = null): ContentMinusFileApiModel

    /**
    * Get a release
    *
    * **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
    *
    * @return ReleaseApiModel
    */
    suspend fun reposGetRelease(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int): ReleaseApiModel

    /**
    * Get a release asset
    *
    * To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.
    *
    * @return ReleaseMinusAssetApiModel
    */
    suspend fun reposGetReleaseAsset(accessToken: String? = null, repoName: kotlin.String, assetId: kotlin.Int): ReleaseMinusAssetApiModel

    /**
    * Get a release by tag name
    *
    * Get a published release with the specified tag.
    *
    * @return ReleaseApiModel
    */
    suspend fun reposGetReleaseByTag(accessToken: String? = null, repoName: kotlin.String, tag: kotlin.String): ReleaseApiModel

    /**
    * Get status checks protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return StatusMinusCheckMinusPolicyApiModel
    */
    suspend fun reposGetStatusChecksProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): StatusMinusCheckMinusPolicyApiModel

    /**
    * Get top referral paths
    *
    * Get the top 10 popular contents over the last 14 days.
    *
    * @return kotlin.collections.List<ContentMinusTrafficApiModel>
    */
    suspend fun reposGetTopPaths(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.List<ContentMinusTrafficApiModel>

    /**
    * Get top referral sources
    *
    * Get the top 10 referrers over the last 14 days.
    *
    * @return kotlin.collections.List<ReferrerMinusTrafficApiModel>
    */
    suspend fun reposGetTopReferrers(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.List<ReferrerMinusTrafficApiModel>

    /**
    * Get page views
    *
    * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    *
    * @return ViewMinusTrafficApiModel
    */
    suspend fun reposGetViews(accessToken: String? = null, repoName: kotlin.String, per: kotlin.String? = null): ViewMinusTrafficApiModel

    /**
    * Get a repository webhook
    *
    * Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\&quot;
    *
    * @return HookApiModel
    */
    suspend fun reposGetWebhook(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int): HookApiModel

    /**
    * Get a webhook configuration for a repository
    *
    * Returns the webhook configuration for a repository. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\&quot;  Access tokens must have the &#x60;read:repo_hook&#x60; or &#x60;repo&#x60; scope, and GitHub Apps must have the &#x60;repository_hooks:read&#x60; permission.
    *
    * @return WebhookMinusConfigApiModel
    */
    suspend fun reposGetWebhookConfigForRepo(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int): WebhookMinusConfigApiModel

    /**
    * List all autolinks of a repository
    *
    * This returns a list of autolinks configured for the given repository.  Information about autolinks are only available to repository administrators.
    *
    * @return kotlin.collections.List<AutolinkApiModel>
    */
    suspend fun reposListAutolinks(accessToken: String? = null, repoName: kotlin.String, page: kotlin.Int? = null): kotlin.collections.List<AutolinkApiModel>

    /**
    * List branches
    *
    * 
    *
    * @return kotlin.collections.List<ShortMinusBranchApiModel>
    */
    suspend fun reposListBranches(accessToken: String? = null, repoName: kotlin.String, isProtected: kotlin.Boolean? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ShortMinusBranchApiModel>

    /**
    * List branches for HEAD commit
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
    *
    * @return kotlin.collections.List<BranchMinusShortApiModel>
    */
    suspend fun reposListBranchesForHeadCommit(accessToken: String? = null, repoName: kotlin.String, commitSha: kotlin.String): kotlin.collections.List<BranchMinusShortApiModel>

    /**
    * List repository collaborators
    *
    * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  You must authenticate using an access token with the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes with push access to use this endpoint. GitHub Apps must have the &#x60;members&#x60; organization permission and &#x60;metadata&#x60; repository permission to use this endpoint.
    *
    * @return kotlin.collections.List<CollaboratorApiModel>
    */
    suspend fun reposListCollaborators(accessToken: String? = null, repoName: kotlin.String, affiliation: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<CollaboratorApiModel>

    /**
    * List commit comments
    *
    * Use the &#x60;:commit_sha&#x60; to specify the commit that will have its comments listed.
    *
    * @return kotlin.collections.List<CommitMinusCommentApiModel>
    */
    suspend fun reposListCommentsForCommit(accessToken: String? = null, repoName: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<CommitMinusCommentApiModel>

    /**
    * List commit comments for a repository
    *
    * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).  Comments are ordered by ascending ID.
    *
    * @return kotlin.collections.List<CommitMinusCommentApiModel>
    */
    suspend fun reposListCommitCommentsForRepo(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<CommitMinusCommentApiModel>

    /**
    * List commit statuses for a reference
    *
    * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.
    *
    * @return kotlin.collections.List<StatusApiModel>
    */
    suspend fun reposListCommitStatusesForRef(accessToken: String? = null, repoName: kotlin.String, ref: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<StatusApiModel>

    /**
    * List commits
    *
    * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
    *
    * @return kotlin.collections.List<CommitApiModel>
    */
    suspend fun reposListCommits(accessToken: String? = null, repoName: kotlin.String, sha: kotlin.String? = null, path: kotlin.String? = null, author: kotlin.String? = null, since: kotlin.String? = null, until: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<CommitApiModel>

    /**
    * List repository contributors
    *
    * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    *
    * @return kotlin.collections.List<ContributorApiModel>
    */
    suspend fun reposListContributors(accessToken: String? = null, repoName: kotlin.String, anon: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ContributorApiModel>

    /**
    * List deploy keys
    *
    * 
    *
    * @return kotlin.collections.List<DeployMinusKeyApiModel>
    */
    suspend fun reposListDeployKeys(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<DeployMinusKeyApiModel>

    /**
    * List deployment statuses
    *
    * Users with pull access can view deployment statuses for a deployment:
    *
    * @return kotlin.collections.List<DeploymentMinusStatusApiModel>
    */
    suspend fun reposListDeploymentStatuses(accessToken: String? = null, repoName: kotlin.String, deploymentId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<DeploymentMinusStatusApiModel>

    /**
    * List deployments
    *
    * Simple filtering of deployments is available via query parameters:
    *
    * @return kotlin.collections.List<DeploymentApiModel>
    */
    suspend fun reposListDeployments(accessToken: String? = null, repoName: kotlin.String, sha: kotlin.String? = null, ref: kotlin.String? = null, task: kotlin.String? = null, environment: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<DeploymentApiModel>

    /**
    * List repositories for the authenticated user
    *
    * Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    *
    * @return kotlin.collections.List<RepositoryApiModel>
    */
    suspend fun reposListForAuthenticatedUser(accessToken: String? = null, visibility: kotlin.String? = null, affiliation: kotlin.String? = null, type: kotlin.String? = null, sort: kotlin.String? = null, direction: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null, since: kotlin.String? = null, before: kotlin.String? = null): kotlin.collections.List<RepositoryApiModel>

    /**
    * List organization repositories
    *
    * Lists repositories for the specified organization.
    *
    * @return kotlin.collections.List<MinimalMinusRepositoryApiModel>
    */
    suspend fun reposListForOrg(accessToken: String? = null, org: kotlin.String, type: kotlin.String? = null, sort: kotlin.String? = null, direction: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MinimalMinusRepositoryApiModel>

    /**
    * List repositories for a user
    *
    * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
    *
    * @return kotlin.collections.List<MinimalMinusRepositoryApiModel>
    */
    suspend fun reposListForUser(accessToken: String? = null, username: kotlin.String, type: kotlin.String? = null, sort: kotlin.String? = null, direction: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MinimalMinusRepositoryApiModel>

    /**
    * List forks
    *
    * 
    *
    * @return kotlin.collections.List<MinimalMinusRepositoryApiModel>
    */
    suspend fun reposListForks(accessToken: String? = null, repoName: kotlin.String, sort: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MinimalMinusRepositoryApiModel>

    /**
    * List repository invitations
    *
    * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
    *
    * @return kotlin.collections.List<RepositoryMinusInvitationApiModel>
    */
    suspend fun reposListInvitations(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<RepositoryMinusInvitationApiModel>

    /**
    * List repository invitations for the authenticated user
    *
    * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
    *
    * @return kotlin.collections.List<RepositoryMinusInvitationApiModel>
    */
    suspend fun reposListInvitationsForAuthenticatedUser(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<RepositoryMinusInvitationApiModel>

    /**
    * List repository languages
    *
    * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
    *
    * @return kotlin.collections.Map<kotlin.String, kotlin.Int>
    */
    suspend fun reposListLanguages(accessToken: String? = null, repoName: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.Int>

    /**
    * List GitHub Pages builds
    *
    * 
    *
    * @return kotlin.collections.List<PageMinusBuildApiModel>
    */
    suspend fun reposListPagesBuilds(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<PageMinusBuildApiModel>

    /**
    * List public repositories
    *
    * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
    *
    * @return kotlin.collections.List<MinimalMinusRepositoryApiModel>
    */
    suspend fun reposListPublic(accessToken: String? = null, since: kotlin.Int? = null): kotlin.collections.List<MinimalMinusRepositoryApiModel>

    /**
    * List pull requests associated with a commit
    *
    * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
    *
    * @return kotlin.collections.List<PullMinusRequestMinusSimpleApiModel>
    */
    suspend fun reposListPullRequestsAssociatedWithCommit(accessToken: String? = null, repoName: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<PullMinusRequestMinusSimpleApiModel>

    /**
    * List release assets
    *
    * 
    *
    * @return kotlin.collections.List<ReleaseMinusAssetApiModel>
    */
    suspend fun reposListReleaseAssets(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReleaseMinusAssetApiModel>

    /**
    * List releases
    *
    * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    *
    * @return kotlin.collections.List<ReleaseApiModel>
    */
    suspend fun reposListReleases(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReleaseApiModel>

    /**
    * List repository tags
    *
    * 
    *
    * @return kotlin.collections.List<TagApiModel>
    */
    suspend fun reposListTags(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<TagApiModel>

    /**
    * List repository teams
    *
    * 
    *
    * @return kotlin.collections.List<TeamApiModel>
    */
    suspend fun reposListTeams(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<TeamApiModel>

    /**
    * List repository webhooks
    *
    * 
    *
    * @return kotlin.collections.List<HookApiModel>
    */
    suspend fun reposListWebhooks(accessToken: String? = null, repoName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<HookApiModel>

    /**
    * Merge a branch
    *
    * 
    *
    * @param request 
    * @return CommitApiModel
    */
    suspend fun reposMerge(accessToken: String? = null, repoName: kotlin.String, request: InlineObject112ApiModel): CommitApiModel

    /**
    * Sync a fork branch with the upstream repository
    *
    * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
    *
    * @param request 
    * @return MergedMinusUpstreamApiModel
    */
    suspend fun reposMergeUpstream(accessToken: String? = null, repoName: kotlin.String, request: InlineObject111ApiModel): MergedMinusUpstreamApiModel

    /**
    * Ping a repository webhook
    *
    * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
    *
    * @return void
    */
    suspend fun reposPingWebhook(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int)

    /**
    * Redeliver a delivery for a repository webhook
    *
    * Redeliver a webhook delivery for a webhook configured in a repository.
    *
    * @return kotlin.Any
    */
    suspend fun reposRedeliverWebhookDelivery(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): kotlin.Any

    /**
    * Remove a repository collaborator
    *
    * 
    *
    * @return void
    */
    suspend fun reposRemoveCollaborator(accessToken: String? = null, repoName: kotlin.String, username: kotlin.String)

    /**
    * Remove status check protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    *
    * @return void
    */
    suspend fun reposRemoveStatusCheckProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String)

    /**
    * Rename a branch
    *
    * Renames a branch in a repository.  **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won&#39;t be able to push to the old branch name while the rename process is in progress. For more information, see \&quot;[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\&quot;.  The permissions required to use this endpoint depends on whether you are renaming the default branch.  To rename a non-default branch:  * Users must have push access. * GitHub Apps must have the &#x60;contents:write&#x60; repository permission.  To rename the default branch:  * Users must have admin or owner permissions. * GitHub Apps must have the &#x60;administration:write&#x60; repository permission.
    *
    * @param request 
    * @return BranchMinusWithMinusProtectionApiModel
    */
    suspend fun reposRenameBranch(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String, request: InlineObject68ApiModel): BranchMinusWithMinusProtectionApiModel

    /**
    * Replace all repository topics
    *
    * 
    *
    * @param request 
    * @return TopicApiModel
    */
    suspend fun reposReplaceAllTopics(accessToken: String? = null, repoName: kotlin.String, request: InlineObject138ApiModel): TopicApiModel

    /**
    * Request a GitHub Pages build
    *
    * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
    *
    * @return PageMinusBuildMinusStatusApiModel
    */
    suspend fun reposRequestPagesBuild(accessToken: String? = null, repoName: kotlin.String): PageMinusBuildMinusStatusApiModel

    /**
    * Set admin branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    *
    * @return ProtectedMinusBranchMinusAdminMinusEnforcedApiModel
    */
    suspend fun reposSetAdminBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel

    /**
    * Test the push repository webhook
    *
    * This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;
    *
    * @return void
    */
    suspend fun reposTestPushWebhook(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int)

    /**
    * Transfer a repository
    *
    * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
    *
    * @param request 
    * @return MinimalMinusRepositoryApiModel
    */
    suspend fun reposTransfer(accessToken: String? = null, repoName: kotlin.String, request: InlineObject139ApiModel): MinimalMinusRepositoryApiModel

    /**
    * Update a repository
    *
    * **Note**: To edit a repository&#39;s topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
    *
    * @param request  (optional)
    * @return FullMinusRepositoryApiModel
    */
    suspend fun reposUpdate(accessToken: String? = null, repoName: kotlin.String, request: InlineObject57ApiModel): FullMinusRepositoryApiModel

    /**
    * Update branch protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
    *
    * @param request 
    * @return ProtectedMinusBranchApiModel
    */
    suspend fun reposUpdateBranchProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String, request: InlineObject65ApiModel): ProtectedMinusBranchApiModel

    /**
    * Update a commit comment
    *
    * 
    *
    * @param request 
    * @return CommitMinusCommentApiModel
    */
    suspend fun reposUpdateCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject75ApiModel): CommitMinusCommentApiModel

    /**
    * Update a repository invitation
    *
    * 
    *
    * @param request  (optional)
    * @return RepositoryMinusInvitationApiModel
    */
    suspend fun reposUpdateInvitation(accessToken: String? = null, repoName: kotlin.String, invitationId: kotlin.Int, request: InlineObject98ApiModel): RepositoryMinusInvitationApiModel

    /**
    * Update pull request review protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.
    *
    * @param request  (optional)
    * @return ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel
    */
    suspend fun reposUpdatePullRequestReviewProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String, request: InlineObject66ApiModel): ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel

    /**
    * Update a release
    *
    * Users with push access to the repository can edit a release.
    *
    * @param request  (optional)
    * @return ReleaseApiModel
    */
    suspend fun reposUpdateRelease(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int, request: InlineObject133ApiModel): ReleaseApiModel

    /**
    * Update a release asset
    *
    * Users with push access to the repository can edit a release asset.
    *
    * @param request  (optional)
    * @return ReleaseMinusAssetApiModel
    */
    suspend fun reposUpdateReleaseAsset(accessToken: String? = null, repoName: kotlin.String, assetId: kotlin.Int, request: InlineObject131ApiModel): ReleaseMinusAssetApiModel

    /**
    * Update status check protection
    *
    * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
    *
    * @param request  (optional)
    * @return StatusMinusCheckMinusPolicyApiModel
    */
    suspend fun reposUpdateStatusCheckProtection(accessToken: String? = null, repoName: kotlin.String, branch: kotlin.String, request: InlineObject67ApiModel): StatusMinusCheckMinusPolicyApiModel

    /**
    * Update a repository webhook
    *
    * Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\&quot;
    *
    * @param request 
    * @return HookApiModel
    */
    suspend fun reposUpdateWebhook(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int, request: InlineObject92ApiModel): HookApiModel

    /**
    * Update a webhook configuration for a repository
    *
    * Updates the webhook configuration for a repository. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\&quot;  Access tokens must have the &#x60;write:repo_hook&#x60; or &#x60;repo&#x60; scope, and GitHub Apps must have the &#x60;repository_hooks:write&#x60; permission.
    *
    * @param request  (optional)
    * @return WebhookMinusConfigApiModel
    */
    suspend fun reposUpdateWebhookConfigForRepo(accessToken: String? = null, repoName: kotlin.String, hookId: kotlin.Int, request: InlineObject93ApiModel): WebhookMinusConfigApiModel

    /**
    * Upload a release asset
    *
    * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   &#x60;application/zip&#x60;  GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you&#39;ll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.  **Notes:** *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \&quot;[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\&quot; endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api). *   If you upload an asset with the same filename as another uploaded asset, you&#39;ll receive an error and must delete the old file before you can re-upload the new asset.
    *
    * @param request  (optional)
    * @return ReleaseMinusAssetApiModel
    */
    suspend fun reposUploadReleaseAsset(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int, name: kotlin.String? = null, label: kotlin.String? = null, request: kotlin.String): ReleaseMinusAssetApiModel

}

class HttpClientReposApi(private val httpClientProvider: HttpClientProvider) : ReposApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun reposAcceptInvitationForAuthenticatedUser(accessToken: String?, invitationId: kotlin.Int) {
        val path = "/user/repository_invitations/{invitation_id}".replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
        }
    }

    override suspend fun reposAddCollaborator(accessToken: String?, repoName: kotlin.String, username: kotlin.String, request: InlineObject74ApiModel): RepositoryMinusInvitationApiModel {
        val path = "/repos/{repo_name}/collaborators/{username}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun reposCheckCollaborator(accessToken: String?, repoName: kotlin.String, username: kotlin.String) {
        val path = "/repos/{repo_name}/collaborators/{username}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposCheckVulnerabilityAlerts(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/vulnerability-alerts".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposCodeownersErrors(accessToken: String?, repoName: kotlin.String, ref: kotlin.String?): CodeownersMinusErrorsApiModel {
        val path = "/repos/{repo_name}/codeowners/errors".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("ref", ref)
        }
    }

    override suspend fun reposCompareCommits(accessToken: String?, repoName: kotlin.String, basehead: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): CommitMinusComparisonApiModel {
        val path = "/repos/{repo_name}/compare/{basehead}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"basehead"+"}", "$basehead")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("per_page", perPage)
        }
    }

    override suspend fun reposCreateAutolink(accessToken: String?, repoName: kotlin.String, request: InlineObject64ApiModel): AutolinkApiModel {
        val path = "/repos/{repo_name}/autolinks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateCommitComment(accessToken: String?, repoName: kotlin.String, commitSha: kotlin.String, request: InlineObject77ApiModel): CommitMinusCommentApiModel {
        val path = "/repos/{repo_name}/commits/{commit_sha}/comments".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"commit_sha"+"}", "$commitSha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateCommitSignatureProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_signatures".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposCreateCommitStatus(accessToken: String?, repoName: kotlin.String, sha: kotlin.String, request: InlineObject136ApiModel): StatusApiModel {
        val path = "/repos/{repo_name}/statuses/{sha}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"sha"+"}", "$sha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateDeployKey(accessToken: String?, repoName: kotlin.String, request: InlineObject108ApiModel): DeployMinusKeyApiModel {
        val path = "/repos/{repo_name}/keys".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateDeployment(accessToken: String?, repoName: kotlin.String, request: InlineObject81ApiModel): DeploymentApiModel {
        val path = "/repos/{repo_name}/deployments".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateDeploymentStatus(accessToken: String?, repoName: kotlin.String, deploymentId: kotlin.Int, request: InlineObject82ApiModel): DeploymentMinusStatusApiModel {
        val path = "/repos/{repo_name}/deployments/{deployment_id}/statuses".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"deployment_id"+"}", "$deploymentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateForAuthenticatedUser(accessToken: String?, request: InlineObject171ApiModel): RepositoryApiModel {
        val path = "/user/repos"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateFork(accessToken: String?, repoName: kotlin.String, request: InlineObject84ApiModel): FullMinusRepositoryApiModel {
        val path = "/repos/{repo_name}/forks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateInOrg(accessToken: String?, org: kotlin.String, request: InlineObject36ApiModel): RepositoryApiModel {
        val path = "/orgs/{org}/repos".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateOrUpdateEnvironment(accessToken: String?, repoName: kotlin.String, environmentName: kotlin.String, request: InlineObject83ApiModel): EnvironmentApiModel {
        val path = "/repos/{repo_name}/environments/{environment_name}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"environment_name"+"}", "$environmentName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun reposCreateOrUpdateFileContents(accessToken: String?, repoName: kotlin.String, path: kotlin.String, request: InlineObject78ApiModel): FileMinusCommitApiModel {
        val path = "/repos/{repo_name}/contents/{path}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"path"+"}", "$path")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun reposCreateRelease(accessToken: String?, repoName: kotlin.String, request: InlineObject130ApiModel): ReleaseApiModel {
        val path = "/repos/{repo_name}/releases".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateUsingTemplate(accessToken: String?, templateOwner: kotlin.String, templateRepo: kotlin.String, request: InlineObject140ApiModel): RepositoryApiModel {
        val path = "/repos/{template_owner}/{template_repo}/generate".replace("{"+"template_owner"+"}", "$templateOwner").replace("{"+"template_repo"+"}", "$templateRepo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposCreateWebhook(accessToken: String?, repoName: kotlin.String, request: InlineObject91ApiModel): HookApiModel {
        val path = "/repos/{repo_name}/hooks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposDeclineInvitationForAuthenticatedUser(accessToken: String?, invitationId: kotlin.Int) {
        val path = "/user/repository_invitations/{invitation_id}".replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDelete(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteAccessRestrictions(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection/restrictions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteAdminBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection/enforce_admins".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteAnEnvironment(accessToken: String?, repoName: kotlin.String, environmentName: kotlin.String) {
        val path = "/repos/{repo_name}/environments/{environment_name}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"environment_name"+"}", "$environmentName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteAutolink(accessToken: String?, repoName: kotlin.String, autolinkId: kotlin.Int) {
        val path = "/repos/{repo_name}/autolinks/{autolink_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"autolink_id"+"}", "$autolinkId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int) {
        val path = "/repos/{repo_name}/comments/{comment_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteCommitSignatureProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_signatures".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteDeployKey(accessToken: String?, repoName: kotlin.String, keyId: kotlin.Int) {
        val path = "/repos/{repo_name}/keys/{key_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"key_id"+"}", "$keyId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteDeployment(accessToken: String?, repoName: kotlin.String, deploymentId: kotlin.Int) {
        val path = "/repos/{repo_name}/deployments/{deployment_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"deployment_id"+"}", "$deploymentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteFile(accessToken: String?, repoName: kotlin.String, path: kotlin.String, request: InlineObject79ApiModel): FileMinusCommitApiModel {
        val path = "/repos/{repo_name}/contents/{path}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"path"+"}", "$path")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
            body = request
        }
    }

    override suspend fun reposDeleteInvitation(accessToken: String?, repoName: kotlin.String, invitationId: kotlin.Int) {
        val path = "/repos/{repo_name}/invitations/{invitation_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeletePullRequestReviewProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_pull_request_reviews".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteRelease(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int) {
        val path = "/repos/{repo_name}/releases/{release_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteReleaseAsset(accessToken: String?, repoName: kotlin.String, assetId: kotlin.Int) {
        val path = "/repos/{repo_name}/releases/assets/{asset_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"asset_id"+"}", "$assetId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDeleteWebhook(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int) {
        val path = "/repos/{repo_name}/hooks/{hook_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDisableAutomatedSecurityFixes(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/automated-security-fixes".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDisableLfsForRepo(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/lfs".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDisableVulnerabilityAlerts(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/vulnerability-alerts".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposDownloadTarballArchive(accessToken: String?, repoName: kotlin.String, ref: kotlin.String) {
        val path = "/repos/{repo_name}/tarball/{ref}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposDownloadZipballArchive(accessToken: String?, repoName: kotlin.String, ref: kotlin.String) {
        val path = "/repos/{repo_name}/zipball/{ref}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposEnableAutomatedSecurityFixes(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/automated-security-fixes".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun reposEnableLfsForRepo(accessToken: String?, repoName: kotlin.String): kotlin.Any {
        val path = "/repos/{repo_name}/lfs".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun reposEnableVulnerabilityAlerts(accessToken: String?, repoName: kotlin.String) {
        val path = "/repos/{repo_name}/vulnerability-alerts".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun reposGenerateReleaseNotes(accessToken: String?, repoName: kotlin.String, request: InlineObject132ApiModel): ReleaseMinusNotesMinusContentApiModel {
        val path = "/repos/{repo_name}/releases/generate-notes".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposGet(accessToken: String?, repoName: kotlin.String): FullMinusRepositoryApiModel {
        val path = "/repos/{repo_name}".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetAccessRestrictions(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): BranchMinusRestrictionMinusPolicyApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/restrictions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetAdminBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/enforce_admins".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetAllEnvironments(accessToken: String?, repoName: kotlin.String): InlineResponse20023ApiModel {
        val path = "/repos/{repo_name}/environments".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetAllTopics(accessToken: String?, repoName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): TopicApiModel {
        val path = "/repos/{repo_name}/topics".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("per_page", perPage)
        }
    }

    override suspend fun reposGetAutolink(accessToken: String?, repoName: kotlin.String, autolinkId: kotlin.Int): AutolinkApiModel {
        val path = "/repos/{repo_name}/autolinks/{autolink_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"autolink_id"+"}", "$autolinkId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetBranch(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): BranchMinusWithMinusProtectionApiModel {
        val path = "/repos/{repo_name}/branches/{branch}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): BranchMinusProtectionApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetClones(accessToken: String?, repoName: kotlin.String, per: kotlin.String?): CloneMinusTrafficApiModel {
        val path = "/repos/{repo_name}/traffic/clones".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per", per)
        }
    }

    override suspend fun reposGetCollaboratorPermissionLevel(accessToken: String?, repoName: kotlin.String, username: kotlin.String): RepositoryMinusCollaboratorMinusPermissionApiModel {
        val path = "/repos/{repo_name}/collaborators/{username}/permission".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetCombinedStatusForRef(accessToken: String?, repoName: kotlin.String, ref: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): CombinedMinusCommitMinusStatusApiModel {
        val path = "/repos/{repo_name}/commits/{ref}/status".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposGetCommit(accessToken: String?, repoName: kotlin.String, ref: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): CommitApiModel {
        val path = "/repos/{repo_name}/commits/{ref}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("per_page", perPage)
        }
    }

    override suspend fun reposGetCommitActivityStats(accessToken: String?, repoName: kotlin.String): kotlin.collections.List<CommitMinusActivityApiModel> {
        val path = "/repos/{repo_name}/stats/commit_activity".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int): CommitMinusCommentApiModel {
        val path = "/repos/{repo_name}/comments/{comment_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetCommitSignatureProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_signatures".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetCommunityProfileMetrics(accessToken: String?, repoName: kotlin.String): CommunityMinusProfileApiModel {
        val path = "/repos/{repo_name}/community/profile".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetContent(accessToken: String?, repoName: kotlin.String, path: kotlin.String, ref: kotlin.String?): ContentMinusTreeApiModel {
        val path = "/repos/{repo_name}/contents/{path}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"path"+"}", "$path")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("ref", ref)
        }
    }

    override suspend fun reposGetContributorsStats(accessToken: String?, repoName: kotlin.String): kotlin.collections.List<ContributorMinusActivityApiModel> {
        val path = "/repos/{repo_name}/stats/contributors".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetDeployKey(accessToken: String?, repoName: kotlin.String, keyId: kotlin.Int): DeployMinusKeyApiModel {
        val path = "/repos/{repo_name}/keys/{key_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"key_id"+"}", "$keyId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetDeployment(accessToken: String?, repoName: kotlin.String, deploymentId: kotlin.Int): DeploymentApiModel {
        val path = "/repos/{repo_name}/deployments/{deployment_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"deployment_id"+"}", "$deploymentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetDeploymentStatus(accessToken: String?, repoName: kotlin.String, deploymentId: kotlin.Int, statusId: kotlin.Int): DeploymentMinusStatusApiModel {
        val path = "/repos/{repo_name}/deployments/{deployment_id}/statuses/{status_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"deployment_id"+"}", "$deploymentId").replace("{"+"status_id"+"}", "$statusId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetEnvironment(accessToken: String?, repoName: kotlin.String, environmentName: kotlin.String): EnvironmentApiModel {
        val path = "/repos/{repo_name}/environments/{environment_name}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"environment_name"+"}", "$environmentName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetLatestPagesBuild(accessToken: String?, repoName: kotlin.String): PageMinusBuildApiModel {
        val path = "/repos/{repo_name}/pages/builds/latest".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetLatestRelease(accessToken: String?, repoName: kotlin.String): ReleaseApiModel {
        val path = "/repos/{repo_name}/releases/latest".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetPagesBuild(accessToken: String?, repoName: kotlin.String, buildId: kotlin.Int): PageMinusBuildApiModel {
        val path = "/repos/{repo_name}/pages/builds/{build_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"build_id"+"}", "$buildId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetPagesHealthCheck(accessToken: String?, repoName: kotlin.String): PagesMinusHealthMinusCheckApiModel {
        val path = "/repos/{repo_name}/pages/health".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetParticipationStats(accessToken: String?, repoName: kotlin.String): ParticipationMinusStatsApiModel {
        val path = "/repos/{repo_name}/stats/participation".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetPullRequestReviewProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_pull_request_reviews".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetPunchCardStats(accessToken: String?, repoName: kotlin.String): kotlin.collections.List<kotlin.collections.List<kotlin.Int>> {
        val path = "/repos/{repo_name}/stats/punch_card".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetReadme(accessToken: String?, repoName: kotlin.String, ref: kotlin.String?): ContentMinusFileApiModel {
        val path = "/repos/{repo_name}/readme".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("ref", ref)
        }
    }

    override suspend fun reposGetReadmeInDirectory(accessToken: String?, repoName: kotlin.String, dir: kotlin.String, ref: kotlin.String?): ContentMinusFileApiModel {
        val path = "/repos/{repo_name}/readme/{dir}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"dir"+"}", "$dir")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("ref", ref)
        }
    }

    override suspend fun reposGetRelease(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int): ReleaseApiModel {
        val path = "/repos/{repo_name}/releases/{release_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetReleaseAsset(accessToken: String?, repoName: kotlin.String, assetId: kotlin.Int): ReleaseMinusAssetApiModel {
        val path = "/repos/{repo_name}/releases/assets/{asset_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"asset_id"+"}", "$assetId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetReleaseByTag(accessToken: String?, repoName: kotlin.String, tag: kotlin.String): ReleaseApiModel {
        val path = "/repos/{repo_name}/releases/tags/{tag}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"tag"+"}", "$tag")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetStatusChecksProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): StatusMinusCheckMinusPolicyApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_status_checks".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetTopPaths(accessToken: String?, repoName: kotlin.String): kotlin.collections.List<ContentMinusTrafficApiModel> {
        val path = "/repos/{repo_name}/traffic/popular/paths".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetTopReferrers(accessToken: String?, repoName: kotlin.String): kotlin.collections.List<ReferrerMinusTrafficApiModel> {
        val path = "/repos/{repo_name}/traffic/popular/referrers".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetViews(accessToken: String?, repoName: kotlin.String, per: kotlin.String?): ViewMinusTrafficApiModel {
        val path = "/repos/{repo_name}/traffic/views".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per", per)
        }
    }

    override suspend fun reposGetWebhook(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int): HookApiModel {
        val path = "/repos/{repo_name}/hooks/{hook_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposGetWebhookConfigForRepo(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int): WebhookMinusConfigApiModel {
        val path = "/repos/{repo_name}/hooks/{hook_id}/config".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposListAutolinks(accessToken: String?, repoName: kotlin.String, page: kotlin.Int?): kotlin.collections.List<AutolinkApiModel> {
        val path = "/repos/{repo_name}/autolinks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
        }
    }

    override suspend fun reposListBranches(accessToken: String?, repoName: kotlin.String, isProtected: kotlin.Boolean?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ShortMinusBranchApiModel> {
        val path = "/repos/{repo_name}/branches".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("is_protected", isProtected)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListBranchesForHeadCommit(accessToken: String?, repoName: kotlin.String, commitSha: kotlin.String): kotlin.collections.List<BranchMinusShortApiModel> {
        val path = "/repos/{repo_name}/commits/{commit_sha}/branches-where-head".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"commit_sha"+"}", "$commitSha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposListCollaborators(accessToken: String?, repoName: kotlin.String, affiliation: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<CollaboratorApiModel> {
        val path = "/repos/{repo_name}/collaborators".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("affiliation", affiliation)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListCommentsForCommit(accessToken: String?, repoName: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<CommitMinusCommentApiModel> {
        val path = "/repos/{repo_name}/commits/{commit_sha}/comments".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"commit_sha"+"}", "$commitSha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListCommitCommentsForRepo(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<CommitMinusCommentApiModel> {
        val path = "/repos/{repo_name}/comments".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListCommitStatusesForRef(accessToken: String?, repoName: kotlin.String, ref: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<StatusApiModel> {
        val path = "/repos/{repo_name}/commits/{ref}/statuses".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListCommits(accessToken: String?, repoName: kotlin.String, sha: kotlin.String?, path: kotlin.String?, author: kotlin.String?, since: kotlin.String?, until: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<CommitApiModel> {
        val path = "/repos/{repo_name}/commits".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("sha", sha)
            parameter("path", path)
            parameter("author", author)
            parameter("since", since)
            parameter("until", until)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListContributors(accessToken: String?, repoName: kotlin.String, anon: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ContributorApiModel> {
        val path = "/repos/{repo_name}/contributors".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("anon", anon)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListDeployKeys(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<DeployMinusKeyApiModel> {
        val path = "/repos/{repo_name}/keys".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListDeploymentStatuses(accessToken: String?, repoName: kotlin.String, deploymentId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<DeploymentMinusStatusApiModel> {
        val path = "/repos/{repo_name}/deployments/{deployment_id}/statuses".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"deployment_id"+"}", "$deploymentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListDeployments(accessToken: String?, repoName: kotlin.String, sha: kotlin.String?, ref: kotlin.String?, task: kotlin.String?, environment: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<DeploymentApiModel> {
        val path = "/repos/{repo_name}/deployments".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("sha", sha)
            parameter("ref", ref)
            parameter("task", task)
            parameter("environment", environment)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListForAuthenticatedUser(accessToken: String?, visibility: kotlin.String?, affiliation: kotlin.String?, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, since: kotlin.String?, before: kotlin.String?): kotlin.collections.List<RepositoryApiModel> {
        val path = "/user/repos"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("visibility", visibility)
            parameter("affiliation", affiliation)
            parameter("type", type)
            parameter("sort", sort)
            parameter("direction", direction)
            parameter("per_page", perPage)
            parameter("page", page)
            parameter("since", since)
            parameter("before", before)
        }
    }

    override suspend fun reposListForOrg(accessToken: String?, org: kotlin.String, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MinimalMinusRepositoryApiModel> {
        val path = "/orgs/{org}/repos".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("type", type)
            parameter("sort", sort)
            parameter("direction", direction)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListForUser(accessToken: String?, username: kotlin.String, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MinimalMinusRepositoryApiModel> {
        val path = "/users/{username}/repos".replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("type", type)
            parameter("sort", sort)
            parameter("direction", direction)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListForks(accessToken: String?, repoName: kotlin.String, sort: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MinimalMinusRepositoryApiModel> {
        val path = "/repos/{repo_name}/forks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("sort", sort)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListInvitations(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<RepositoryMinusInvitationApiModel> {
        val path = "/repos/{repo_name}/invitations".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListInvitationsForAuthenticatedUser(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<RepositoryMinusInvitationApiModel> {
        val path = "/user/repository_invitations"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListLanguages(accessToken: String?, repoName: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.Int> {
        val path = "/repos/{repo_name}/languages".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun reposListPagesBuilds(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<PageMinusBuildApiModel> {
        val path = "/repos/{repo_name}/pages/builds".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListPublic(accessToken: String?, since: kotlin.Int?): kotlin.collections.List<MinimalMinusRepositoryApiModel> {
        val path = "/repositories"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
        }
    }

    override suspend fun reposListPullRequestsAssociatedWithCommit(accessToken: String?, repoName: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<PullMinusRequestMinusSimpleApiModel> {
        val path = "/repos/{repo_name}/commits/{commit_sha}/pulls".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"commit_sha"+"}", "$commitSha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListReleaseAssets(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReleaseMinusAssetApiModel> {
        val path = "/repos/{repo_name}/releases/{release_id}/assets".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListReleases(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReleaseApiModel> {
        val path = "/repos/{repo_name}/releases".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListTags(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<TagApiModel> {
        val path = "/repos/{repo_name}/tags".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListTeams(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<TeamApiModel> {
        val path = "/repos/{repo_name}/teams".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposListWebhooks(accessToken: String?, repoName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<HookApiModel> {
        val path = "/repos/{repo_name}/hooks".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reposMerge(accessToken: String?, repoName: kotlin.String, request: InlineObject112ApiModel): CommitApiModel {
        val path = "/repos/{repo_name}/merges".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposMergeUpstream(accessToken: String?, repoName: kotlin.String, request: InlineObject111ApiModel): MergedMinusUpstreamApiModel {
        val path = "/repos/{repo_name}/merge-upstream".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposPingWebhook(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int) {
        val path = "/repos/{repo_name}/hooks/{hook_id}/pings".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposRedeliverWebhookDelivery(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): kotlin.Any {
        val path = "/repos/{repo_name}/hooks/{hook_id}/deliveries/{delivery_id}/attempts".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId").replace("{"+"delivery_id"+"}", "$deliveryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposRemoveCollaborator(accessToken: String?, repoName: kotlin.String, username: kotlin.String) {
        val path = "/repos/{repo_name}/collaborators/{username}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposRemoveStatusCheckProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String) {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_status_checks".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reposRenameBranch(accessToken: String?, repoName: kotlin.String, branch: kotlin.String, request: InlineObject68ApiModel): BranchMinusWithMinusProtectionApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/rename".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposReplaceAllTopics(accessToken: String?, repoName: kotlin.String, request: InlineObject138ApiModel): TopicApiModel {
        val path = "/repos/{repo_name}/topics".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun reposRequestPagesBuild(accessToken: String?, repoName: kotlin.String): PageMinusBuildMinusStatusApiModel {
        val path = "/repos/{repo_name}/pages/builds".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposSetAdminBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String): ProtectedMinusBranchMinusAdminMinusEnforcedApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/enforce_admins".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposTestPushWebhook(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int) {
        val path = "/repos/{repo_name}/hooks/{hook_id}/tests".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun reposTransfer(accessToken: String?, repoName: kotlin.String, request: InlineObject139ApiModel): MinimalMinusRepositoryApiModel {
        val path = "/repos/{repo_name}/transfer".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reposUpdate(accessToken: String?, repoName: kotlin.String, request: InlineObject57ApiModel): FullMinusRepositoryApiModel {
        val path = "/repos/{repo_name}".replace("{"+"repo_name"+"}", "$repoName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateBranchProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String, request: InlineObject65ApiModel): ProtectedMinusBranchApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun reposUpdateCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject75ApiModel): CommitMinusCommentApiModel {
        val path = "/repos/{repo_name}/comments/{comment_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateInvitation(accessToken: String?, repoName: kotlin.String, invitationId: kotlin.Int, request: InlineObject98ApiModel): RepositoryMinusInvitationApiModel {
        val path = "/repos/{repo_name}/invitations/{invitation_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdatePullRequestReviewProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String, request: InlineObject66ApiModel): ProtectedMinusBranchMinusPullMinusRequestMinusReviewApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_pull_request_reviews".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateRelease(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int, request: InlineObject133ApiModel): ReleaseApiModel {
        val path = "/repos/{repo_name}/releases/{release_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateReleaseAsset(accessToken: String?, repoName: kotlin.String, assetId: kotlin.Int, request: InlineObject131ApiModel): ReleaseMinusAssetApiModel {
        val path = "/repos/{repo_name}/releases/assets/{asset_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"asset_id"+"}", "$assetId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateStatusCheckProtection(accessToken: String?, repoName: kotlin.String, branch: kotlin.String, request: InlineObject67ApiModel): StatusMinusCheckMinusPolicyApiModel {
        val path = "/repos/{repo_name}/branches/{branch}/protection/required_status_checks".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"branch"+"}", "$branch")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateWebhook(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int, request: InlineObject92ApiModel): HookApiModel {
        val path = "/repos/{repo_name}/hooks/{hook_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUpdateWebhookConfigForRepo(accessToken: String?, repoName: kotlin.String, hookId: kotlin.Int, request: InlineObject93ApiModel): WebhookMinusConfigApiModel {
        val path = "/repos/{repo_name}/hooks/{hook_id}/config".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun reposUploadReleaseAsset(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int, name: kotlin.String?, label: kotlin.String?, request: kotlin.String): ReleaseMinusAssetApiModel {
        val path = "/repos/{repo_name}/releases/{release_id}/assets".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
            parameter("name", name)
            parameter("label", label)
        }
    }

}
