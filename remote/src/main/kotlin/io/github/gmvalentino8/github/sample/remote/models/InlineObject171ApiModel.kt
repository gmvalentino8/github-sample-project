/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.models


import kotlinx.serialization.*

/**
 * 
 * @param name The name of the repository.
 * @param description A short description of the repository.
 * @param homepage A URL with more information about the repository.
 * @param `private` Whether the repository is private.
 * @param hasIssues Whether issues are enabled.
 * @param hasProjects Whether projects are enabled.
 * @param hasWiki Whether the wiki is enabled.
 * @param teamId The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
 * @param autoInit Whether the repository is initialized with a minimal README.
 * @param gitignoreTemplate The desired language or platform to apply to the .gitignore.
 * @param licenseTemplate The license keyword of the open source license for this repository.
 * @param allowSquashMerge Whether to allow squash merges for pull requests.
 * @param allowMergeCommit Whether to allow merge commits for pull requests.
 * @param allowRebaseMerge Whether to allow rebase merges for pull requests.
 * @param allowAutoMerge Whether to allow Auto-merge to be used on pull requests.
 * @param deleteBranchOnMerge Whether to delete head branches when pull requests are merged
 * @param hasDownloads Whether downloads are enabled.
 * @param isTemplate Whether this repository acts as a template that can be used to generate new repositories.
 */
@Serializable
data class InlineObject171ApiModel(
    /* The name of the repository. */
    @SerialName(value = "name")
    val name: kotlin.String,
    /* A short description of the repository. */
    @SerialName(value = "description")
    val description: kotlin.String? = null,
    /* A URL with more information about the repository. */
    @SerialName(value = "homepage")
    val homepage: kotlin.String? = null,
    /* Whether the repository is private. */
    @SerialName(value = "private")
    val `private`: kotlin.Boolean? = false,
    /* Whether issues are enabled. */
    @SerialName(value = "has_issues")
    val hasIssues: kotlin.Boolean? = true,
    /* Whether projects are enabled. */
    @SerialName(value = "has_projects")
    val hasProjects: kotlin.Boolean? = true,
    /* Whether the wiki is enabled. */
    @SerialName(value = "has_wiki")
    val hasWiki: kotlin.Boolean? = true,
    /* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    @SerialName(value = "team_id")
    val teamId: kotlin.Int? = null,
    /* Whether the repository is initialized with a minimal README. */
    @SerialName(value = "auto_init")
    val autoInit: kotlin.Boolean? = false,
    /* The desired language or platform to apply to the .gitignore. */
    @SerialName(value = "gitignore_template")
    val gitignoreTemplate: kotlin.String? = null,
    /* The license keyword of the open source license for this repository. */
    @SerialName(value = "license_template")
    val licenseTemplate: kotlin.String? = null,
    /* Whether to allow squash merges for pull requests. */
    @SerialName(value = "allow_squash_merge")
    val allowSquashMerge: kotlin.Boolean? = true,
    /* Whether to allow merge commits for pull requests. */
    @SerialName(value = "allow_merge_commit")
    val allowMergeCommit: kotlin.Boolean? = true,
    /* Whether to allow rebase merges for pull requests. */
    @SerialName(value = "allow_rebase_merge")
    val allowRebaseMerge: kotlin.Boolean? = true,
    /* Whether to allow Auto-merge to be used on pull requests. */
    @SerialName(value = "allow_auto_merge")
    val allowAutoMerge: kotlin.Boolean? = false,
    /* Whether to delete head branches when pull requests are merged */
    @SerialName(value = "delete_branch_on_merge")
    val deleteBranchOnMerge: kotlin.Boolean? = false,
    /* Whether downloads are enabled. */
    @SerialName(value = "has_downloads")
    val hasDownloads: kotlin.Boolean? = true,
    /* Whether this repository acts as a template that can be used to generate new repositories. */
    @SerialName(value = "is_template")
    val isTemplate: kotlin.Boolean? = false
) {

}

