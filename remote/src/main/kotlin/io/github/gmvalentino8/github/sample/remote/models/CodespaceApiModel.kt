/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.models

import io.github.gmvalentino8.github.sample.remote.models.CodespaceGitStatusApiModel
import io.github.gmvalentino8.github.sample.remote.models.CodespaceRuntimeConstraintsApiModel
import io.github.gmvalentino8.github.sample.remote.models.MinimalMinusRepositoryApiModel
import io.github.gmvalentino8.github.sample.remote.models.NullableMinusCodespaceMinusMachineApiModel
import io.github.gmvalentino8.github.sample.remote.models.SimpleMinusUserApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * A codespace.
 * @param id 
 * @param name Automatically generated name of this codespace.
 * @param environmentId UUID identifying this codespace's environment.
 * @param owner 
 * @param billableOwner 
 * @param repository 
 * @param machine 
 * @param prebuild Whether the codespace was created from a prebuild.
 * @param createdAt 
 * @param updatedAt 
 * @param lastUsedAt Last known time this codespace was started.
 * @param state State of this codespace.
 * @param url API URL for this codespace.
 * @param gitStatus 
 * @param location The Azure region where this codespace is located.
 * @param idleTimeoutMinutes The number of minutes of inactivity after which this codespace will be automatically stopped.
 * @param webUrl URL to access this codespace on the web.
 * @param machinesUrl API URL to access available alternate machine types for this codespace.
 * @param startUrl API URL to start this codespace.
 * @param stopUrl API URL to stop this codespace.
 * @param pullsUrl API URL for the Pull Request associated with this codespace, if any.
 * @param recentFolders 
 * @param displayName Display name for this codespace.
 * @param runtimeConstraints 
 */
@Serializable
data class CodespaceApiModel(
    @SerialName(value = "id")
    val id: kotlin.Int,
    /* Automatically generated name of this codespace. */
    @SerialName(value = "name")
    val name: kotlin.String,
    /* UUID identifying this codespace's environment. */
    @SerialName(value = "environment_id")
    val environmentId: kotlin.String?,
    @SerialName(value = "owner")
    val owner: SimpleMinusUserApiModel,
    @SerialName(value = "billable_owner")
    val billableOwner: SimpleMinusUserApiModel,
    @SerialName(value = "repository")
    val repository: MinimalMinusRepositoryApiModel,
    @SerialName(value = "machine")
    val machine: NullableMinusCodespaceMinusMachineApiModel?,
    /* Whether the codespace was created from a prebuild. */
    @SerialName(value = "prebuild")
    val prebuild: kotlin.Boolean?,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    /* Last known time this codespace was started. */
    @SerialName(value = "last_used_at")
    val lastUsedAt: kotlin.String,
    /* State of this codespace. */
    @SerialName(value = "state")
    val state: CodespaceApiModel.State,
    /* API URL for this codespace. */
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "git_status")
    val gitStatus: CodespaceGitStatusApiModel,
    /* The Azure region where this codespace is located. */
    @SerialName(value = "location")
    val location: CodespaceApiModel.Location,
    /* The number of minutes of inactivity after which this codespace will be automatically stopped. */
    @SerialName(value = "idle_timeout_minutes")
    val idleTimeoutMinutes: kotlin.Int?,
    /* URL to access this codespace on the web. */
    @SerialName(value = "web_url")
    val webUrl: kotlin.String,
    /* API URL to access available alternate machine types for this codespace. */
    @SerialName(value = "machines_url")
    val machinesUrl: kotlin.String,
    /* API URL to start this codespace. */
    @SerialName(value = "start_url")
    val startUrl: kotlin.String,
    /* API URL to stop this codespace. */
    @SerialName(value = "stop_url")
    val stopUrl: kotlin.String,
    /* API URL for the Pull Request associated with this codespace, if any. */
    @SerialName(value = "pulls_url")
    val pullsUrl: kotlin.String?,
    @SerialName(value = "recent_folders")
    val recentFolders: kotlin.collections.List<kotlin.String>,
    /* Display name for this codespace. */
    @SerialName(value = "display_name")
    val displayName: kotlin.String? = null,
    @SerialName(value = "runtime_constraints")
    val runtimeConstraints: CodespaceRuntimeConstraintsApiModel? = null
) {

    /**
     * State of this codespace.
     * Values: unknown,created,queued,provisioning,available,awaiting,unavailable,deleted,moved,shutdown,archived,starting,shuttingDown,failed,exporting,updating,rebuilding
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        unknown("Unknown"),
        created("Created"),
        queued("Queued"),
        provisioning("Provisioning"),
        available("Available"),
        awaiting("Awaiting"),
        unavailable("Unavailable"),
        deleted("Deleted"),
        moved("Moved"),
        shutdown("Shutdown"),
        archived("Archived"),
        starting("Starting"),
        shuttingDown("ShuttingDown"),
        failed("Failed"),
        exporting("Exporting"),
        updating("Updating"),
        rebuilding("Rebuilding");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CodespaceApiModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The Azure region where this codespace is located.
     * Values: eastUs,southEastAsia,westEurope,westUs2
     */
    @Serializable(with = Location.Serializer::class)
    enum class Location(val value: kotlin.String) {
        eastUs("EastUs"),
        southEastAsia("SouthEastAsia"),
        westEurope("WestEurope"),
        westUs2("WestUs2");

        @kotlinx.serialization.Serializer(forClass = Location::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Location {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "CodespaceApiModel.Location.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Location) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

