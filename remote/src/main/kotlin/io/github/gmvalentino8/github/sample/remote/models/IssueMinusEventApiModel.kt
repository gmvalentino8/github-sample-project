/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.models

import io.github.gmvalentino8.github.sample.remote.models.AuthorAssociationApiModel
import io.github.gmvalentino8.github.sample.remote.models.IssueMinusEventMinusDismissedMinusReviewApiModel
import io.github.gmvalentino8.github.sample.remote.models.IssueMinusEventMinusLabelApiModel
import io.github.gmvalentino8.github.sample.remote.models.IssueMinusEventMinusMilestoneApiModel
import io.github.gmvalentino8.github.sample.remote.models.IssueMinusEventMinusProjectMinusCardApiModel
import io.github.gmvalentino8.github.sample.remote.models.IssueMinusEventMinusRenameApiModel
import io.github.gmvalentino8.github.sample.remote.models.NullableMinusIntegrationApiModel
import io.github.gmvalentino8.github.sample.remote.models.NullableMinusIssueApiModel
import io.github.gmvalentino8.github.sample.remote.models.NullableMinusSimpleMinusUserApiModel
import io.github.gmvalentino8.github.sample.remote.models.TeamApiModel

import kotlinx.serialization.*

/**
 * Issue Event
 * @param id 
 * @param nodeId 
 * @param url 
 * @param actor 
 * @param event 
 * @param commitId 
 * @param commitUrl 
 * @param createdAt 
 * @param issue 
 * @param label 
 * @param assignee 
 * @param assigner 
 * @param reviewRequester 
 * @param requestedReviewer 
 * @param requestedTeam 
 * @param dismissedReview 
 * @param milestone 
 * @param projectCard 
 * @param rename 
 * @param authorAssociation 
 * @param lockReason 
 * @param performedViaGithubApp 
 */
@Serializable
data class IssueMinusEventApiModel(
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "actor")
    val actor: NullableMinusSimpleMinusUserApiModel?,
    @SerialName(value = "event")
    val event: kotlin.String,
    @SerialName(value = "commit_id")
    val commitId: kotlin.String?,
    @SerialName(value = "commit_url")
    val commitUrl: kotlin.String?,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "issue")
    val issue: NullableMinusIssueApiModel? = null,
    @SerialName(value = "label")
    val label: IssueMinusEventMinusLabelApiModel? = null,
    @SerialName(value = "assignee")
    val assignee: NullableMinusSimpleMinusUserApiModel? = null,
    @SerialName(value = "assigner")
    val assigner: NullableMinusSimpleMinusUserApiModel? = null,
    @SerialName(value = "review_requester")
    val reviewRequester: NullableMinusSimpleMinusUserApiModel? = null,
    @SerialName(value = "requested_reviewer")
    val requestedReviewer: NullableMinusSimpleMinusUserApiModel? = null,
    @SerialName(value = "requested_team")
    val requestedTeam: TeamApiModel? = null,
    @SerialName(value = "dismissed_review")
    val dismissedReview: IssueMinusEventMinusDismissedMinusReviewApiModel? = null,
    @SerialName(value = "milestone")
    val milestone: IssueMinusEventMinusMilestoneApiModel? = null,
    @SerialName(value = "project_card")
    val projectCard: IssueMinusEventMinusProjectMinusCardApiModel? = null,
    @SerialName(value = "rename")
    val rename: IssueMinusEventMinusRenameApiModel? = null,
    @Contextual @SerialName(value = "author_association")
    val authorAssociation: AuthorAssociationApiModel? = null,
    @SerialName(value = "lock_reason")
    val lockReason: kotlin.String? = null,
    @SerialName(value = "performed_via_github_app")
    val performedViaGithubApp: NullableMinusIntegrationApiModel? = null
) {

}

