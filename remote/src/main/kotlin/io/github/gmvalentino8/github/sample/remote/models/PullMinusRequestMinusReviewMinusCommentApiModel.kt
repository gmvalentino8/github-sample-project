/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.gmvalentino8.github.sample.remote.models

import io.github.gmvalentino8.github.sample.remote.models.AuthorAssociationApiModel
import io.github.gmvalentino8.github.sample.remote.models.PullRequestReviewCommentLinksApiModel
import io.github.gmvalentino8.github.sample.remote.models.ReactionMinusRollupApiModel
import io.github.gmvalentino8.github.sample.remote.models.SimpleMinusUserApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 * @param url URL for the pull request review comment
 * @param pullRequestReviewId The ID of the pull request review to which the comment belongs.
 * @param id The ID of the pull request review comment.
 * @param nodeId The node ID of the pull request review comment.
 * @param diffHunk The diff of the line that the comment refers to.
 * @param path The relative path of the file to which the comment applies.
 * @param position The line index in the diff to which the comment applies.
 * @param originalPosition The index of the original line in the diff to which the comment applies.
 * @param commitId The SHA of the commit to which the comment applies.
 * @param originalCommitId The SHA of the original commit to which the comment applies.
 * @param user 
 * @param body The text of the comment.
 * @param createdAt 
 * @param updatedAt 
 * @param htmlUrl HTML URL for the pull request review comment.
 * @param pullRequestUrl URL for the pull request that the review comment belongs to.
 * @param authorAssociation 
 * @param links 
 * @param inReplyToId The comment ID to reply to.
 * @param startLine The first line of the range for a multi-line comment.
 * @param originalStartLine The first line of the range for a multi-line comment.
 * @param startSide The side of the first line of the range for a multi-line comment.
 * @param line The line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @param originalLine The line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @param side The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
 * @param reactions 
 * @param bodyHtml 
 * @param bodyText 
 */
@Serializable
data class PullMinusRequestMinusReviewMinusCommentApiModel(
    /* URL for the pull request review comment */
    @SerialName(value = "url")
    val url: kotlin.String,
    /* The ID of the pull request review to which the comment belongs. */
    @SerialName(value = "pull_request_review_id")
    val pullRequestReviewId: kotlin.Int?,
    /* The ID of the pull request review comment. */
    @SerialName(value = "id")
    val id: kotlin.Int,
    /* The node ID of the pull request review comment. */
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    /* The diff of the line that the comment refers to. */
    @SerialName(value = "diff_hunk")
    val diffHunk: kotlin.String,
    /* The relative path of the file to which the comment applies. */
    @SerialName(value = "path")
    val path: kotlin.String,
    /* The line index in the diff to which the comment applies. */
    @SerialName(value = "position")
    val position: kotlin.Int,
    /* The index of the original line in the diff to which the comment applies. */
    @SerialName(value = "original_position")
    val originalPosition: kotlin.Int,
    /* The SHA of the commit to which the comment applies. */
    @SerialName(value = "commit_id")
    val commitId: kotlin.String,
    /* The SHA of the original commit to which the comment applies. */
    @SerialName(value = "original_commit_id")
    val originalCommitId: kotlin.String,
    @SerialName(value = "user")
    val user: SimpleMinusUserApiModel,
    /* The text of the comment. */
    @SerialName(value = "body")
    val body: kotlin.String,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    /* HTML URL for the pull request review comment. */
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    /* URL for the pull request that the review comment belongs to. */
    @SerialName(value = "pull_request_url")
    val pullRequestUrl: kotlin.String,
    @Contextual @SerialName(value = "author_association")
    val authorAssociation: AuthorAssociationApiModel,
    @SerialName(value = "_links")
    val links: PullRequestReviewCommentLinksApiModel,
    /* The comment ID to reply to. */
    @SerialName(value = "in_reply_to_id")
    val inReplyToId: kotlin.Int? = null,
    /* The first line of the range for a multi-line comment. */
    @SerialName(value = "start_line")
    val startLine: kotlin.Int? = null,
    /* The first line of the range for a multi-line comment. */
    @SerialName(value = "original_start_line")
    val originalStartLine: kotlin.Int? = null,
    /* The side of the first line of the range for a multi-line comment. */
    @SerialName(value = "start_side")
    val startSide: PullMinusRequestMinusReviewMinusCommentApiModel.StartSide? = StartSide.rIGHT,
    /* The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    @SerialName(value = "line")
    val line: kotlin.Int? = null,
    /* The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    @SerialName(value = "original_line")
    val originalLine: kotlin.Int? = null,
    /* The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */
    @SerialName(value = "side")
    val side: PullMinusRequestMinusReviewMinusCommentApiModel.Side? = Side.rIGHT,
    @SerialName(value = "reactions")
    val reactions: ReactionMinusRollupApiModel? = null,
    @SerialName(value = "body_html")
    val bodyHtml: kotlin.String? = null,
    @SerialName(value = "body_text")
    val bodyText: kotlin.String? = null
) {

    /**
     * The side of the first line of the range for a multi-line comment.
     * Values: lEFT,rIGHT
     */
    @Serializable(with = StartSide.Serializer::class)
    enum class StartSide(val value: kotlin.String) {
        lEFT("LEFT"),
        rIGHT("RIGHT");

        @kotlinx.serialization.Serializer(forClass = StartSide::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): StartSide {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PullMinusRequestMinusReviewMinusCommentApiModel.StartSide.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: StartSide) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
     * Values: lEFT,rIGHT
     */
    @Serializable(with = Side.Serializer::class)
    enum class Side(val value: kotlin.String) {
        lEFT("LEFT"),
        rIGHT("RIGHT");

        @kotlinx.serialization.Serializer(forClass = Side::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Side {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PullMinusRequestMinusReviewMinusCommentApiModel.Side.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Side) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

