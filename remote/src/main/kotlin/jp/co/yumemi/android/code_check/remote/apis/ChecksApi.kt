/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.remote.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface ChecksApi {
    /**
    * Create a check suite
    *
    * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
    *
    * @param request 
    * @return CheckMinusSuiteApiModel
    */
    suspend fun checksCreateSuite(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, request: InlineObject69ApiModel): CheckMinusSuiteApiModel

    /**
    * Get a check suite
    *
    * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
    *
    * @return CheckMinusSuiteApiModel
    */
    suspend fun checksGetSuite(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int): CheckMinusSuiteApiModel

    /**
    * List check run annotations
    *
    * Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
    *
    * @return kotlin.collections.List<CheckMinusAnnotationApiModel>
    */
    suspend fun checksListAnnotations(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, checkRunId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<CheckMinusAnnotationApiModel>

    /**
    * List check runs for a Git reference
    *
    * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
    *
    * @return InlineResponse20018ApiModel
    */
    suspend fun checksListForRef(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, checkName: kotlin.String? = null, status: kotlin.String? = null, filter: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null, appId: kotlin.Int? = null): InlineResponse20018ApiModel

    /**
    * List check runs in a check suite
    *
    * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
    *
    * @return InlineResponse20018ApiModel
    */
    suspend fun checksListForSuite(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int, checkName: kotlin.String? = null, status: kotlin.String? = null, filter: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20018ApiModel

    /**
    * List check suites for a Git reference
    *
    * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
    *
    * @return InlineResponse20021ApiModel
    */
    suspend fun checksListSuitesForRef(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, appId: kotlin.Int? = null, checkName: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20021ApiModel

    /**
    * Rerequest a check run
    *
    * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_run&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action &#x60;rerequested&#x60;. When a check run is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check run, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
    *
    * @return kotlin.Any
    */
    suspend fun checksRerequestRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, checkRunId: kotlin.Int): kotlin.Any

    /**
    * Rerequest a check suite
    *
    * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
    *
    * @return kotlin.Any
    */
    suspend fun checksRerequestSuite(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int): kotlin.Any

    /**
    * Update repository preferences for check suites
    *
    * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
    *
    * @param request 
    * @return CheckMinusSuiteMinusPreferenceApiModel
    */
    suspend fun checksSetSuitesPreferences(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, request: InlineObject70ApiModel): CheckMinusSuiteMinusPreferenceApiModel

}

class HttpClientChecksApi(private val httpClientProvider: HttpClientProvider) : ChecksApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun checksCreateSuite(accessToken: String?, owner: kotlin.String, repo: kotlin.String, request: InlineObject69ApiModel): CheckMinusSuiteApiModel {
        val path = "/repos/{owner}/{repo}/check-suites".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun checksGetSuite(accessToken: String?, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int): CheckMinusSuiteApiModel {
        val path = "/repos/{owner}/{repo}/check-suites/{check_suite_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"check_suite_id"+"}", "$checkSuiteId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun checksListAnnotations(accessToken: String?, owner: kotlin.String, repo: kotlin.String, checkRunId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<CheckMinusAnnotationApiModel> {
        val path = "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"check_run_id"+"}", "$checkRunId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun checksListForRef(accessToken: String?, owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, checkName: kotlin.String?, status: kotlin.String?, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, appId: kotlin.Int?): InlineResponse20018ApiModel {
        val path = "/repos/{owner}/{repo}/commits/{ref}/check-runs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("checkName", checkName)
            parameter("status", status)
            parameter("filter", filter)
            parameter("perPage", perPage)
            parameter("page", page)
            parameter("appId", appId)
        }
    }

    override suspend fun checksListForSuite(accessToken: String?, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int, checkName: kotlin.String?, status: kotlin.String?, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20018ApiModel {
        val path = "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"check_suite_id"+"}", "$checkSuiteId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("checkName", checkName)
            parameter("status", status)
            parameter("filter", filter)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun checksListSuitesForRef(accessToken: String?, owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, appId: kotlin.Int?, checkName: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20021ApiModel {
        val path = "/repos/{owner}/{repo}/commits/{ref}/check-suites".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"ref"+"}", "$ref")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("appId", appId)
            parameter("checkName", checkName)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun checksRerequestRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, checkRunId: kotlin.Int): kotlin.Any {
        val path = "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"check_run_id"+"}", "$checkRunId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun checksRerequestSuite(accessToken: String?, owner: kotlin.String, repo: kotlin.String, checkSuiteId: kotlin.Int): kotlin.Any {
        val path = "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"check_suite_id"+"}", "$checkSuiteId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun checksSetSuitesPreferences(accessToken: String?, owner: kotlin.String, repo: kotlin.String, request: InlineObject70ApiModel): CheckMinusSuiteMinusPreferenceApiModel {
        val path = "/repos/{owner}/{repo}/check-suites/preferences".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
