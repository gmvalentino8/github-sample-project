/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param state The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
 * @param targetUrl The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
 * @param logUrl The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`
 * @param description A short description of the status. The maximum description length is 140 characters.
 * @param environment Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
 * @param environmentUrl Sets the URL for accessing your environment. Default: `\"\"`
 * @param autoInactive Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
 */
@Serializable
data class InlineObject82ApiModel(
    /* The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
    @SerialName(value = "state")
    val state: InlineObject82ApiModel.State,
    /* The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */
    @SerialName(value = "target_url")
    val targetUrl: kotlin.String? = "",
    /* The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"` */
    @SerialName(value = "log_url")
    val logUrl: kotlin.String? = "",
    /* A short description of the status. The maximum description length is 140 characters. */
    @SerialName(value = "description")
    val description: kotlin.String? = "",
    /* Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */
    @SerialName(value = "environment")
    val environment: InlineObject82ApiModel.Environment? = null,
    /* Sets the URL for accessing your environment. Default: `\"\"` */
    @SerialName(value = "environment_url")
    val environmentUrl: kotlin.String? = "",
    /* Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
    @SerialName(value = "auto_inactive")
    val autoInactive: kotlin.Boolean? = null
) {

    /**
     * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
     * Values: error,failure,inactive,inProgress,queued,pending,success
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        error("error"),
        failure("failure"),
        inactive("inactive"),
        inProgress("in_progress"),
        queued("queued"),
        pending("pending"),
        success("success");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InlineObject82ApiModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
     * Values: production,staging,qa
     */
    @Serializable(with = Environment.Serializer::class)
    enum class Environment(val value: kotlin.String) {
        production("production"),
        staging("staging"),
        qa("qa");

        @kotlinx.serialization.Serializer(forClass = Environment::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Environment {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InlineObject82ApiModel.Environment.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Environment) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

