/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.remote.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface GistsApi {
    /**
    * Check if a gist is starred
    *
    * 
    *
    * @return void
    */
    suspend fun gistsCheckIsStarred(accessToken: String? = null, gistId: kotlin.String)

    /**
    * Create a gist
    *
    * Allows you to add a new gist with one or more files.  **Note:** Don&#39;t name your files \&quot;gistfile\&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    *
    * @param request 
    * @return GistMinusSimpleApiModel
    */
    suspend fun gistsCreate(accessToken: String? = null, request: InlineObject11ApiModel): GistMinusSimpleApiModel

    /**
    * Create a gist comment
    *
    * 
    *
    * @param request 
    * @return GistMinusCommentApiModel
    */
    suspend fun gistsCreateComment(accessToken: String? = null, gistId: kotlin.String, request: InlineObject12ApiModel): GistMinusCommentApiModel

    /**
    * Delete a gist comment
    *
    * 
    *
    * @return void
    */
    suspend fun gistsDeleteComment(accessToken: String? = null, gistId: kotlin.String, commentId: kotlin.Int)

    /**
    * Fork a gist
    *
    * **Note**: This was previously &#x60;/gists/:gist_id/fork&#x60;.
    *
    * @return BaseMinusGistApiModel
    */
    suspend fun gistsFork(accessToken: String? = null, gistId: kotlin.String): BaseMinusGistApiModel

    /**
    * Get a gist comment
    *
    * 
    *
    * @return GistMinusCommentApiModel
    */
    suspend fun gistsGetComment(accessToken: String? = null, gistId: kotlin.String, commentId: kotlin.Int): GistMinusCommentApiModel

    /**
    * Get a gist revision
    *
    * 
    *
    * @return GistMinusSimpleApiModel
    */
    suspend fun gistsGetRevision(accessToken: String? = null, gistId: kotlin.String, sha: kotlin.String): GistMinusSimpleApiModel

    /**
    * List gists for the authenticated user
    *
    * Lists the authenticated user&#39;s gists or if called anonymously, this endpoint returns all public gists:
    *
    * @return kotlin.collections.List<BaseMinusGistApiModel>
    */
    suspend fun gistsList(accessToken: String? = null, since: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<BaseMinusGistApiModel>

    /**
    * List gist comments
    *
    * 
    *
    * @return kotlin.collections.List<GistMinusCommentApiModel>
    */
    suspend fun gistsListComments(accessToken: String? = null, gistId: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<GistMinusCommentApiModel>

    /**
    * List gist commits
    *
    * 
    *
    * @return kotlin.collections.List<GistMinusCommitApiModel>
    */
    suspend fun gistsListCommits(accessToken: String? = null, gistId: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<GistMinusCommitApiModel>

    /**
    * List gists for a user
    *
    * Lists public gists for the specified user:
    *
    * @return kotlin.collections.List<BaseMinusGistApiModel>
    */
    suspend fun gistsListForUser(accessToken: String? = null, username: kotlin.String, since: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<BaseMinusGistApiModel>

    /**
    * List gist forks
    *
    * 
    *
    * @return kotlin.collections.List<GistMinusSimpleApiModel>
    */
    suspend fun gistsListForks(accessToken: String? = null, gistId: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<GistMinusSimpleApiModel>

    /**
    * List public gists
    *
    * List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    *
    * @return kotlin.collections.List<BaseMinusGistApiModel>
    */
    suspend fun gistsListPublic(accessToken: String? = null, since: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<BaseMinusGistApiModel>

    /**
    * List starred gists
    *
    * List the authenticated user&#39;s starred gists:
    *
    * @return kotlin.collections.List<BaseMinusGistApiModel>
    */
    suspend fun gistsListStarred(accessToken: String? = null, since: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<BaseMinusGistApiModel>

    /**
    * Star a gist
    *
    * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    *
    * @return void
    */
    suspend fun gistsStar(accessToken: String? = null, gistId: kotlin.String)

    /**
    * Unstar a gist
    *
    * 
    *
    * @return void
    */
    suspend fun gistsUnstar(accessToken: String? = null, gistId: kotlin.String)

    /**
    * Update a gist comment
    *
    * 
    *
    * @param request 
    * @return GistMinusCommentApiModel
    */
    suspend fun gistsUpdateComment(accessToken: String? = null, gistId: kotlin.String, commentId: kotlin.Int, request: InlineObject13ApiModel): GistMinusCommentApiModel

}

class HttpClientGistsApi(private val httpClientProvider: HttpClientProvider) : GistsApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun gistsCheckIsStarred(accessToken: String?, gistId: kotlin.String) {
        val path = "/gists/{gist_id}/star".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun gistsCreate(accessToken: String?, request: InlineObject11ApiModel): GistMinusSimpleApiModel {
        val path = "/gists"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun gistsCreateComment(accessToken: String?, gistId: kotlin.String, request: InlineObject12ApiModel): GistMinusCommentApiModel {
        val path = "/gists/{gist_id}/comments".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun gistsDeleteComment(accessToken: String?, gistId: kotlin.String, commentId: kotlin.Int) {
        val path = "/gists/{gist_id}/comments/{comment_id}".replace("{"+"gist_id"+"}", "$gistId").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun gistsFork(accessToken: String?, gistId: kotlin.String): BaseMinusGistApiModel {
        val path = "/gists/{gist_id}/forks".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun gistsGetComment(accessToken: String?, gistId: kotlin.String, commentId: kotlin.Int): GistMinusCommentApiModel {
        val path = "/gists/{gist_id}/comments/{comment_id}".replace("{"+"gist_id"+"}", "$gistId").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun gistsGetRevision(accessToken: String?, gistId: kotlin.String, sha: kotlin.String): GistMinusSimpleApiModel {
        val path = "/gists/{gist_id}/{sha}".replace("{"+"gist_id"+"}", "$gistId").replace("{"+"sha"+"}", "$sha")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun gistsList(accessToken: String?, since: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<BaseMinusGistApiModel> {
        val path = "/gists"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListComments(accessToken: String?, gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<GistMinusCommentApiModel> {
        val path = "/gists/{gist_id}/comments".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListCommits(accessToken: String?, gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<GistMinusCommitApiModel> {
        val path = "/gists/{gist_id}/commits".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListForUser(accessToken: String?, username: kotlin.String, since: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<BaseMinusGistApiModel> {
        val path = "/users/{username}/gists".replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListForks(accessToken: String?, gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<GistMinusSimpleApiModel> {
        val path = "/gists/{gist_id}/forks".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListPublic(accessToken: String?, since: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<BaseMinusGistApiModel> {
        val path = "/gists/public"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsListStarred(accessToken: String?, since: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<BaseMinusGistApiModel> {
        val path = "/gists/starred"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun gistsStar(accessToken: String?, gistId: kotlin.String) {
        val path = "/gists/{gist_id}/star".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun gistsUnstar(accessToken: String?, gistId: kotlin.String) {
        val path = "/gists/{gist_id}/star".replace("{"+"gist_id"+"}", "$gistId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun gistsUpdateComment(accessToken: String?, gistId: kotlin.String, commentId: kotlin.Int, request: InlineObject13ApiModel): GistMinusCommentApiModel {
        val path = "/gists/{gist_id}/comments/{comment_id}".replace("{"+"gist_id"+"}", "$gistId").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
