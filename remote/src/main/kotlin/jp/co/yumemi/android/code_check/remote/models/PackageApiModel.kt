/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models

import jp.co.yumemi.android.code_check.remote.models.NullableMinusMinimalMinusRepositoryApiModel
import jp.co.yumemi.android.code_check.remote.models.NullableMinusSimpleMinusUserApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * A software package
 * @param id Unique identifier of the package.
 * @param name The name of the package.
 * @param packageType 
 * @param url 
 * @param htmlUrl 
 * @param versionCount The number of versions of the package.
 * @param visibility 
 * @param createdAt 
 * @param updatedAt 
 * @param owner 
 * @param repository 
 */
@Serializable
data class PackageApiModel(
    /* Unique identifier of the package. */
    @SerialName(value = "id")
    val id: kotlin.Int,
    /* The name of the package. */
    @SerialName(value = "name")
    val name: kotlin.String,
    @SerialName(value = "package_type")
    val packageType: PackageApiModel.PackageType,
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    /* The number of versions of the package. */
    @SerialName(value = "version_count")
    val versionCount: kotlin.Int,
    @SerialName(value = "visibility")
    val visibility: PackageApiModel.Visibility,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    @SerialName(value = "owner")
    val owner: NullableMinusSimpleMinusUserApiModel? = null,
    @SerialName(value = "repository")
    val repository: NullableMinusMinimalMinusRepositoryApiModel? = null
) {

    /**
     * 
     * Values: npm,maven,rubygems,docker,nuget,container
     */
    @Serializable(with = PackageType.Serializer::class)
    enum class PackageType(val value: kotlin.String) {
        npm("npm"),
        maven("maven"),
        rubygems("rubygems"),
        docker("docker"),
        nuget("nuget"),
        container("container");

        @kotlinx.serialization.Serializer(forClass = PackageType::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): PackageType {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PackageApiModel.PackageType.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: PackageType) {
                return encoder.encodeString(value.value)
            }
        }
    }
    /**
     * 
     * Values: `private`,`public`
     */
    @Serializable(with = Visibility.Serializer::class)
    enum class Visibility(val value: kotlin.String) {
        `private`("private"),
        `public`("public");

        @kotlinx.serialization.Serializer(forClass = Visibility::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Visibility {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PackageApiModel.Visibility.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Visibility) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

