/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models

import jp.co.yumemi.android.code_check.remote.models.MinimalMinusRepositoryApiModel
import jp.co.yumemi.android.code_check.remote.models.NullableMinusSimpleMinusUserApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Repository invitations let you manage who you collaborate with.
 * @param id Unique identifier of the repository invitation.
 * @param repository 
 * @param invitee 
 * @param inviter 
 * @param permissions The permission associated with the invitation.
 * @param createdAt 
 * @param url URL for the repository invitation
 * @param htmlUrl 
 * @param nodeId 
 * @param expired Whether or not the invitation has expired
 */
@Serializable
data class RepositoryMinusInvitationApiModel(
    /* Unique identifier of the repository invitation. */
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "repository")
    val repository: MinimalMinusRepositoryApiModel,
    @SerialName(value = "invitee")
    val invitee: NullableMinusSimpleMinusUserApiModel?,
    @SerialName(value = "inviter")
    val inviter: NullableMinusSimpleMinusUserApiModel?,
    /* The permission associated with the invitation. */
    @SerialName(value = "permissions")
    val permissions: RepositoryMinusInvitationApiModel.Permissions,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    /* URL for the repository invitation */
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    /* Whether or not the invitation has expired */
    @SerialName(value = "expired")
    val expired: kotlin.Boolean? = null
) {

    /**
     * The permission associated with the invitation.
     * Values: read,write,admin,triage,maintain
     */
    @Serializable(with = Permissions.Serializer::class)
    enum class Permissions(val value: kotlin.String) {
        read("read"),
        write("write"),
        admin("admin"),
        triage("triage"),
        maintain("maintain");

        @kotlinx.serialization.Serializer(forClass = Permissions::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Permissions {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "RepositoryMinusInvitationApiModel.Permissions.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Permissions) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

