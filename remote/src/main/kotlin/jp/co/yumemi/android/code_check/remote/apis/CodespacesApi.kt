/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.remote.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface CodespacesApi {
    /**
    * Add a selected repository to a user secret
    *
    * Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return void
    */
    suspend fun codespacesAddRepositoryForSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * List machine types for a codespace
    *
    * List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return InlineResponse20020ApiModel
    */
    suspend fun codespacesCodespaceMachinesForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): InlineResponse20020ApiModel

    /**
    * Create or update a secret for the authenticated user
    *
    * Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;user&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun codespacesCreateOrUpdateSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String, request: InlineObject162ApiModel): kotlin.Any

    /**
    * Create a codespace from a pull request
    *
    * Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return CodespaceApiModel
    */
    suspend fun codespacesCreateWithPrForAuthenticatedUser(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, pullNumber: kotlin.Int, request: InlineObject121ApiModel): CodespaceApiModel

    /**
    * Create a codespace in a repository
    *
    * Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return CodespaceApiModel
    */
    suspend fun codespacesCreateWithRepoForAuthenticatedUser(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, request: InlineObject73ApiModel): CodespaceApiModel

    /**
    * Delete a codespace for the authenticated user
    *
    * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return kotlin.Any
    */
    suspend fun codespacesDeleteForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): kotlin.Any

    /**
    * Delete a secret for the authenticated user
    *
    * Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret. You must authenticate using an access token with the &#x60;user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return void
    */
    suspend fun codespacesDeleteSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String)

    /**
    * Export a codespace for the authenticated user
    *
    * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return CodespaceMinusExportMinusDetailsApiModel
    */
    suspend fun codespacesExportForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): CodespaceMinusExportMinusDetailsApiModel

    /**
    * Get details about a codespace export
    *
    * Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return CodespaceMinusExportMinusDetailsApiModel
    */
    suspend fun codespacesGetExportDetailsForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String, exportId: kotlin.String): CodespaceMinusExportMinusDetailsApiModel

    /**
    * Get a codespace for the authenticated user
    *
    * Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return CodespaceApiModel
    */
    suspend fun codespacesGetForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): CodespaceApiModel

    /**
    * Get public key for the authenticated user
    *
    * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with one of the &#39;read:user&#39; or &#39;user&#39; scopes in their personal access token. User must have Codespaces access to use this endpoint.
    *
    * @return CodespacesMinusUserMinusPublicMinusKeyApiModel
    */
    suspend fun codespacesGetPublicKeyForAuthenticatedUser(accessToken: String? = null): CodespacesMinusUserMinusPublicMinusKeyApiModel

    /**
    * Get a secret for the authenticated user
    *
    * Gets a secret available to a user&#39;s codespaces without revealing its encrypted value. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return CodespacesMinusSecretApiModel
    */
    suspend fun codespacesGetSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String): CodespacesMinusSecretApiModel

    /**
    * List codespaces in a repository for the authenticated user
    *
    * Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return InlineResponse20019ApiModel
    */
    suspend fun codespacesListInRepositoryForAuthenticatedUser(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20019ApiModel

    /**
    * List selected repositories for a user secret
    *
    * List the repositories that have been granted the ability to use a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return InlineResponse20010ApiModel
    */
    suspend fun codespacesListRepositoriesForSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String): InlineResponse20010ApiModel

    /**
    * List secrets for the authenticated user
    *
    * Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return InlineResponse20031ApiModel
    */
    suspend fun codespacesListSecretsForAuthenticatedUser(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20031ApiModel

    /**
    * Remove a selected repository from a user secret
    *
    * Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @return void
    */
    suspend fun codespacesRemoveRepositoryForSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * List available machine types for a repository
    *
    * List the machine types available for a given repository based on its configuration.  Location is required.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return InlineResponse20020ApiModel
    */
    suspend fun codespacesRepoMachinesForAuthenticatedUser(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, location: kotlin.String? = null): InlineResponse20020ApiModel

    /**
    * Set selected repositories for a user secret
    *
    * Select the repositories that will use a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;user&#x60; or &#x60;read:user&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.
    *
    * @param request 
    * @return void
    */
    suspend fun codespacesSetRepositoriesForSecretForAuthenticatedUser(accessToken: String? = null, secretName: kotlin.String, request: InlineObject163ApiModel)

    /**
    * Start a codespace for the authenticated user
    *
    * Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return CodespaceApiModel
    */
    suspend fun codespacesStartForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): CodespaceApiModel

    /**
    * Stop a codespace for the authenticated user
    *
    * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @return CodespaceApiModel
    */
    suspend fun codespacesStopForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String): CodespaceApiModel

    /**
    * Update a codespace for the authenticated user
    *
    * Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.
    *
    * @param request  (optional)
    * @return CodespaceApiModel
    */
    suspend fun codespacesUpdateForAuthenticatedUser(accessToken: String? = null, codespaceName: kotlin.String, request: InlineObject164ApiModel): CodespaceApiModel

}

class HttpClientCodespacesApi(private val httpClientProvider: HttpClientProvider) : CodespacesApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun codespacesAddRepositoryForSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun codespacesCodespaceMachinesForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): InlineResponse20020ApiModel {
        val path = "/user/codespaces/{codespace_name}/machines".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesCreateOrUpdateSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String, request: InlineObject162ApiModel): kotlin.Any {
        val path = "/user/codespaces/secrets/{secret_name}".replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun codespacesCreateWithPrForAuthenticatedUser(accessToken: String?, owner: kotlin.String, repo: kotlin.String, pullNumber: kotlin.Int, request: InlineObject121ApiModel): CodespaceApiModel {
        val path = "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"pull_number"+"}", "$pullNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun codespacesCreateWithRepoForAuthenticatedUser(accessToken: String?, owner: kotlin.String, repo: kotlin.String, request: InlineObject73ApiModel): CodespaceApiModel {
        val path = "/repos/{owner}/{repo}/codespaces".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun codespacesDeleteForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): kotlin.Any {
        val path = "/user/codespaces/{codespace_name}".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun codespacesDeleteSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String) {
        val path = "/user/codespaces/secrets/{secret_name}".replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun codespacesExportForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): CodespaceMinusExportMinusDetailsApiModel {
        val path = "/user/codespaces/{codespace_name}/exports".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun codespacesGetExportDetailsForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String, exportId: kotlin.String): CodespaceMinusExportMinusDetailsApiModel {
        val path = "/user/codespaces/{codespace_name}/exports/{export_id}".replace("{"+"codespace_name"+"}", "$codespaceName").replace("{"+"export_id"+"}", "$exportId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesGetForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): CodespaceApiModel {
        val path = "/user/codespaces/{codespace_name}".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesGetPublicKeyForAuthenticatedUser(accessToken: String?): CodespacesMinusUserMinusPublicMinusKeyApiModel {
        val path = "/user/codespaces/secrets/public-key"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesGetSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String): CodespacesMinusSecretApiModel {
        val path = "/user/codespaces/secrets/{secret_name}".replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesListInRepositoryForAuthenticatedUser(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20019ApiModel {
        val path = "/repos/{owner}/{repo}/codespaces".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun codespacesListRepositoriesForSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String): InlineResponse20010ApiModel {
        val path = "/user/codespaces/secrets/{secret_name}/repositories".replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun codespacesListSecretsForAuthenticatedUser(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20031ApiModel {
        val path = "/user/codespaces/secrets"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun codespacesRemoveRepositoryForSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun codespacesRepoMachinesForAuthenticatedUser(accessToken: String?, owner: kotlin.String, repo: kotlin.String, location: kotlin.String?): InlineResponse20020ApiModel {
        val path = "/repos/{owner}/{repo}/codespaces/machines".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("location", location)
        }
    }

    override suspend fun codespacesSetRepositoriesForSecretForAuthenticatedUser(accessToken: String?, secretName: kotlin.String, request: InlineObject163ApiModel) {
        val path = "/user/codespaces/secrets/{secret_name}/repositories".replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun codespacesStartForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): CodespaceApiModel {
        val path = "/user/codespaces/{codespace_name}/start".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun codespacesStopForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String): CodespaceApiModel {
        val path = "/user/codespaces/{codespace_name}/stop".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun codespacesUpdateForAuthenticatedUser(accessToken: String?, codespaceName: kotlin.String, request: InlineObject164ApiModel): CodespaceApiModel {
        val path = "/user/codespaces/{codespace_name}".replace("{"+"codespace_name"+"}", "$codespaceName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
