/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.data.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface OrgsApi {
    /**
    * Block a user from an organization
    *
    * 
    *
    * @return void
    */
    suspend fun orgsBlockUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Cancel an organization invitation
    *
    * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    *
    * @return void
    */
    suspend fun orgsCancelInvitation(accessToken: String? = null, org: kotlin.String, invitationId: kotlin.Int)

    /**
    * Check if a user is blocked by an organization
    *
    * 
    *
    * @return void
    */
    suspend fun orgsCheckBlockedUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Check organization membership for a user
    *
    * Check if a user is, publicly or privately, a member of the organization.
    *
    * @return void
    */
    suspend fun orgsCheckMembershipForUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Check public organization membership for a user
    *
    * 
    *
    * @return void
    */
    suspend fun orgsCheckPublicMembershipForUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Convert an organization member to outside collaborator
    *
    * When an organization member is converted to an outside collaborator, they&#39;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \&quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\&quot;.
    *
    * @return kotlin.Any
    */
    suspend fun orgsConvertMemberToOutsideCollaborator(accessToken: String? = null, org: kotlin.String, username: kotlin.String): kotlin.Any

    /**
    * Create an organization invitation
    *
    * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
    *
    * @param request  (optional)
    * @return OrganizationMinusInvitationModel
    */
    suspend fun orgsCreateInvitation(accessToken: String? = null, org: kotlin.String, request: InlineObject32Model): OrganizationMinusInvitationModel

    /**
    * Create an organization webhook
    *
    * Here&#39;s how you can create a hook that posts payloads in JSON format:
    *
    * @param request 
    * @return OrgMinusHookModel
    */
    suspend fun orgsCreateWebhook(accessToken: String? = null, org: kotlin.String, request: InlineObject30Model): OrgMinusHookModel

    /**
    * Get an organization
    *
    * To see many of the organization response values, you need to be an authenticated organization owner with the &#x60;admin:org&#x60; scope. When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  GitHub Apps with the &#x60;Organization plan&#x60; permission can use this endpoint to retrieve information about an organization&#39;s GitHub plan. See \&quot;[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\&quot; for details. For an example response, see &#39;Response with GitHub plan information&#39; below.\&quot;
    *
    * @return OrganizationMinusFullModel
    */
    suspend fun orgsGet(accessToken: String? = null, org: kotlin.String): OrganizationMinusFullModel

    /**
    * Get an organization membership for the authenticated user
    *
    * 
    *
    * @return OrgMinusMembershipModel
    */
    suspend fun orgsGetMembershipForAuthenticatedUser(accessToken: String? = null, org: kotlin.String): OrgMinusMembershipModel

    /**
    * Get organization membership for a user
    *
    * In order to get a user&#39;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#39;s membership status.
    *
    * @return OrgMinusMembershipModel
    */
    suspend fun orgsGetMembershipForUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String): OrgMinusMembershipModel

    /**
    * Get a webhook configuration for an organization
    *
    * Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:read&#x60; permission.
    *
    * @return WebhookMinusConfigModel
    */
    suspend fun orgsGetWebhookConfigForOrg(accessToken: String? = null, org: kotlin.String, hookId: kotlin.Int): WebhookMinusConfigModel

    /**
    * List organizations
    *
    * Lists all organizations, in the order that they were created on GitHub.  **Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
    *
    * @return kotlin.collections.List<OrganizationMinusSimpleModel>
    */
    suspend fun orgsList(accessToken: String? = null, since: kotlin.Int? = null, perPage: kotlin.Int? = null): kotlin.collections.List<OrganizationMinusSimpleModel>

    /**
    * List app installations for an organization
    *
    * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with &#x60;admin:read&#x60; scope to use this endpoint.
    *
    * @return InlineResponse20012Model
    */
    suspend fun orgsListAppInstallations(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20012Model

    /**
    * List users blocked by an organization
    *
    * List the users blocked by an organization.
    *
    * @return kotlin.collections.List<SimpleMinusUserModel>
    */
    suspend fun orgsListBlockedUsers(accessToken: String? = null, org: kotlin.String): kotlin.collections.List<SimpleMinusUserModel>

    /**
    * List custom repository roles in an organization
    *
    * List the custom repository roles available in this organization. In order to see custom repository roles in an organization, the authenticated user must be an organization owner.  For more information on custom repository roles, see \&quot;[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)\&quot;.
    *
    * @return InlineResponse2002Model
    */
    suspend fun orgsListCustomRoles(accessToken: String? = null, organizationId: kotlin.String): InlineResponse2002Model

    /**
    * List failed organization invitations
    *
    * The return hash contains &#x60;failed_at&#x60; and &#x60;failed_reason&#x60; fields which represent the time at which the invitation failed and the reason for the failure.
    *
    * @return kotlin.collections.List<OrganizationMinusInvitationModel>
    */
    suspend fun orgsListFailedInvitations(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrganizationMinusInvitationModel>

    /**
    * List organizations for the authenticated user
    *
    * List organizations for the authenticated user.  **OAuth scope requirements**  This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope. OAuth requests with insufficient scope receive a &#x60;403 Forbidden&#x60; response.
    *
    * @return kotlin.collections.List<OrganizationMinusSimpleModel>
    */
    suspend fun orgsListForAuthenticatedUser(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrganizationMinusSimpleModel>

    /**
    * List organizations for a user
    *
    * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
    *
    * @return kotlin.collections.List<OrganizationMinusSimpleModel>
    */
    suspend fun orgsListForUser(accessToken: String? = null, username: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrganizationMinusSimpleModel>

    /**
    * List organization invitation teams
    *
    * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    *
    * @return kotlin.collections.List<TeamModel>
    */
    suspend fun orgsListInvitationTeams(accessToken: String? = null, org: kotlin.String, invitationId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<TeamModel>

    /**
    * List organization members
    *
    * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    *
    * @return kotlin.collections.List<SimpleMinusUserModel>
    */
    suspend fun orgsListMembers(accessToken: String? = null, org: kotlin.String, filter: kotlin.String? = null, role: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<SimpleMinusUserModel>

    /**
    * List organization memberships for the authenticated user
    *
    * 
    *
    * @return kotlin.collections.List<OrgMinusMembershipModel>
    */
    suspend fun orgsListMembershipsForAuthenticatedUser(accessToken: String? = null, state: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrgMinusMembershipModel>

    /**
    * List outside collaborators for an organization
    *
    * List all users who are outside collaborators of an organization.
    *
    * @return kotlin.collections.List<SimpleMinusUserModel>
    */
    suspend fun orgsListOutsideCollaborators(accessToken: String? = null, org: kotlin.String, filter: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<SimpleMinusUserModel>

    /**
    * List pending organization invitations
    *
    * The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
    *
    * @return kotlin.collections.List<OrganizationMinusInvitationModel>
    */
    suspend fun orgsListPendingInvitations(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrganizationMinusInvitationModel>

    /**
    * List public organization members
    *
    * Members of an organization can choose to have their membership publicized or not.
    *
    * @return kotlin.collections.List<SimpleMinusUserModel>
    */
    suspend fun orgsListPublicMembers(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<SimpleMinusUserModel>

    /**
    * List SAML SSO authorizations for an organization
    *
    * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the &#x60;read:org&#x60; scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
    *
    * @return kotlin.collections.List<CredentialMinusAuthorizationModel>
    */
    suspend fun orgsListSamlSsoAuthorizations(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null, login: kotlin.String? = null): kotlin.collections.List<CredentialMinusAuthorizationModel>

    /**
    * List deliveries for an organization webhook
    *
    * Returns a list of webhook deliveries for a webhook configured in an organization.
    *
    * @return kotlin.collections.List<HookMinusDeliveryMinusItemModel>
    */
    suspend fun orgsListWebhookDeliveries(accessToken: String? = null, org: kotlin.String, hookId: kotlin.Int, perPage: kotlin.Int? = null, cursor: kotlin.String? = null): kotlin.collections.List<HookMinusDeliveryMinusItemModel>

    /**
    * List organization webhooks
    *
    * 
    *
    * @return kotlin.collections.List<OrgMinusHookModel>
    */
    suspend fun orgsListWebhooks(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<OrgMinusHookModel>

    /**
    * Ping an organization webhook
    *
    * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
    *
    * @return void
    */
    suspend fun orgsPingWebhook(accessToken: String? = null, org: kotlin.String, hookId: kotlin.Int)

    /**
    * Redeliver a delivery for an organization webhook
    *
    * Redeliver a delivery for a webhook configured in an organization.
    *
    * @return kotlin.Any
    */
    suspend fun orgsRedeliverWebhookDelivery(accessToken: String? = null, org: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): kotlin.Any

    /**
    * Remove an organization member
    *
    * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#39;s repositories.
    *
    * @return void
    */
    suspend fun orgsRemoveMember(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Remove organization membership for a user
    *
    * In order to remove a user&#39;s membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    *
    * @return void
    */
    suspend fun orgsRemoveMembershipForUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Remove outside collaborator from an organization
    *
    * Removing a user from this list will remove them from all the organization&#39;s repositories.
    *
    * @return void
    */
    suspend fun orgsRemoveOutsideCollaborator(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Remove public organization membership for the authenticated user
    *
    * 
    *
    * @return void
    */
    suspend fun orgsRemovePublicMembershipForAuthenticatedUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Remove a SAML SSO authorization for an organization
    *
    * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the &#x60;admin:org&#x60; scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone&#39;s credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
    *
    * @return void
    */
    suspend fun orgsRemoveSamlSsoAuthorization(accessToken: String? = null, org: kotlin.String, credentialId: kotlin.Int)

    /**
    * Set organization membership for a user
    *
    * Only authenticated organization owners can add a member to the organization or update the member&#39;s role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#39;s [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.      *   Authenticated users can _update_ a user&#39;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#39;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#39;ve been made an organization owner. If the authenticated user changes an owner&#39;s role to &#x60;member&#x60;, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    *
    * @param request  (optional)
    * @return OrgMinusMembershipModel
    */
    suspend fun orgsSetMembershipForUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String, request: InlineObject33Model): OrgMinusMembershipModel

    /**
    * Set public organization membership for the authenticated user
    *
    * The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
    *
    * @return void
    */
    suspend fun orgsSetPublicMembershipForAuthenticatedUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Unblock a user from an organization
    *
    * 
    *
    * @return void
    */
    suspend fun orgsUnblockUser(accessToken: String? = null, org: kotlin.String, username: kotlin.String)

    /**
    * Update an organization
    *
    * **Parameter Deprecation Notice:** GitHub will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Enables an authenticated organization owner with the &#x60;admin:org&#x60; scope to update the organization&#39;s profile and member privileges.
    *
    * @param request  (optional)
    * @return OrganizationMinusFullModel
    */
    suspend fun orgsUpdate(accessToken: String? = null, org: kotlin.String, request: InlineObject17Model): OrganizationMinusFullModel

    /**
    * Update an organization membership for the authenticated user
    *
    * 
    *
    * @param request 
    * @return OrgMinusMembershipModel
    */
    suspend fun orgsUpdateMembershipForAuthenticatedUser(accessToken: String? = null, org: kotlin.String, request: InlineObject168Model): OrgMinusMembershipModel

    /**
    * Update a webhook configuration for an organization
    *
    * Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:write&#x60; permission.
    *
    * @param request  (optional)
    * @return WebhookMinusConfigModel
    */
    suspend fun orgsUpdateWebhookConfigForOrg(accessToken: String? = null, org: kotlin.String, hookId: kotlin.Int, request: InlineObject31Model): WebhookMinusConfigModel

}

class HttpClientOrgsApi(private val httpClientProvider: HttpClientProvider) : OrgsApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun orgsBlockUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/blocks/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun orgsCancelInvitation(accessToken: String?, org: kotlin.String, invitationId: kotlin.Int) {
        val path = "/orgs/{org}/invitations/{invitation_id}".replace("{"+"org"+"}", "$org").replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsCheckBlockedUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/blocks/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsCheckMembershipForUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/members/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsCheckPublicMembershipForUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/public_members/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsConvertMemberToOutsideCollaborator(accessToken: String?, org: kotlin.String, username: kotlin.String): kotlin.Any {
        val path = "/orgs/{org}/outside_collaborators/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun orgsCreateInvitation(accessToken: String?, org: kotlin.String, request: InlineObject32Model): OrganizationMinusInvitationModel {
        val path = "/orgs/{org}/invitations".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun orgsCreateWebhook(accessToken: String?, org: kotlin.String, request: InlineObject30Model): OrgMinusHookModel {
        val path = "/orgs/{org}/hooks".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun orgsGet(accessToken: String?, org: kotlin.String): OrganizationMinusFullModel {
        val path = "/orgs/{org}".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsGetMembershipForAuthenticatedUser(accessToken: String?, org: kotlin.String): OrgMinusMembershipModel {
        val path = "/user/memberships/orgs/{org}".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsGetMembershipForUser(accessToken: String?, org: kotlin.String, username: kotlin.String): OrgMinusMembershipModel {
        val path = "/orgs/{org}/memberships/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsGetWebhookConfigForOrg(accessToken: String?, org: kotlin.String, hookId: kotlin.Int): WebhookMinusConfigModel {
        val path = "/orgs/{org}/hooks/{hook_id}/config".replace("{"+"org"+"}", "$org").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsList(accessToken: String?, since: kotlin.Int?, perPage: kotlin.Int?): kotlin.collections.List<OrganizationMinusSimpleModel> {
        val path = "/organizations"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("since", since)
            parameter("perPage", perPage)
        }
    }

    override suspend fun orgsListAppInstallations(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20012Model {
        val path = "/orgs/{org}/installations".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListBlockedUsers(accessToken: String?, org: kotlin.String): kotlin.collections.List<SimpleMinusUserModel> {
        val path = "/orgs/{org}/blocks".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsListCustomRoles(accessToken: String?, organizationId: kotlin.String): InlineResponse2002Model {
        val path = "/organizations/{organization_id}/custom_roles".replace("{"+"organization_id"+"}", "$organizationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun orgsListFailedInvitations(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrganizationMinusInvitationModel> {
        val path = "/orgs/{org}/failed_invitations".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListForAuthenticatedUser(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrganizationMinusSimpleModel> {
        val path = "/user/orgs"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListForUser(accessToken: String?, username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrganizationMinusSimpleModel> {
        val path = "/users/{username}/orgs".replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListInvitationTeams(accessToken: String?, org: kotlin.String, invitationId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<TeamModel> {
        val path = "/orgs/{org}/invitations/{invitation_id}/teams".replace("{"+"org"+"}", "$org").replace("{"+"invitation_id"+"}", "$invitationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListMembers(accessToken: String?, org: kotlin.String, filter: kotlin.String?, role: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<SimpleMinusUserModel> {
        val path = "/orgs/{org}/members".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("filter", filter)
            parameter("role", role)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListMembershipsForAuthenticatedUser(accessToken: String?, state: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrgMinusMembershipModel> {
        val path = "/user/memberships/orgs"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("state", state)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListOutsideCollaborators(accessToken: String?, org: kotlin.String, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<SimpleMinusUserModel> {
        val path = "/orgs/{org}/outside_collaborators".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("filter", filter)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListPendingInvitations(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrganizationMinusInvitationModel> {
        val path = "/orgs/{org}/invitations".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListPublicMembers(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<SimpleMinusUserModel> {
        val path = "/orgs/{org}/public_members".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsListSamlSsoAuthorizations(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, login: kotlin.String?): kotlin.collections.List<CredentialMinusAuthorizationModel> {
        val path = "/orgs/{org}/credential-authorizations".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
            parameter("login", login)
        }
    }

    override suspend fun orgsListWebhookDeliveries(accessToken: String?, org: kotlin.String, hookId: kotlin.Int, perPage: kotlin.Int?, cursor: kotlin.String?): kotlin.collections.List<HookMinusDeliveryMinusItemModel> {
        val path = "/orgs/{org}/hooks/{hook_id}/deliveries".replace("{"+"org"+"}", "$org").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("cursor", cursor)
        }
    }

    override suspend fun orgsListWebhooks(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<OrgMinusHookModel> {
        val path = "/orgs/{org}/hooks".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun orgsPingWebhook(accessToken: String?, org: kotlin.String, hookId: kotlin.Int) {
        val path = "/orgs/{org}/hooks/{hook_id}/pings".replace("{"+"org"+"}", "$org").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun orgsRedeliverWebhookDelivery(accessToken: String?, org: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): kotlin.Any {
        val path = "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts".replace("{"+"org"+"}", "$org").replace("{"+"hook_id"+"}", "$hookId").replace("{"+"delivery_id"+"}", "$deliveryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun orgsRemoveMember(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/members/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsRemoveMembershipForUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/memberships/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsRemoveOutsideCollaborator(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/outside_collaborators/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsRemovePublicMembershipForAuthenticatedUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/public_members/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsRemoveSamlSsoAuthorization(accessToken: String?, org: kotlin.String, credentialId: kotlin.Int) {
        val path = "/orgs/{org}/credential-authorizations/{credential_id}".replace("{"+"org"+"}", "$org").replace("{"+"credential_id"+"}", "$credentialId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsSetMembershipForUser(accessToken: String?, org: kotlin.String, username: kotlin.String, request: InlineObject33Model): OrgMinusMembershipModel {
        val path = "/orgs/{org}/memberships/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun orgsSetPublicMembershipForAuthenticatedUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/public_members/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun orgsUnblockUser(accessToken: String?, org: kotlin.String, username: kotlin.String) {
        val path = "/orgs/{org}/blocks/{username}".replace("{"+"org"+"}", "$org").replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun orgsUpdate(accessToken: String?, org: kotlin.String, request: InlineObject17Model): OrganizationMinusFullModel {
        val path = "/orgs/{org}".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun orgsUpdateMembershipForAuthenticatedUser(accessToken: String?, org: kotlin.String, request: InlineObject168Model): OrgMinusMembershipModel {
        val path = "/user/memberships/orgs/{org}".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun orgsUpdateWebhookConfigForOrg(accessToken: String?, org: kotlin.String, hookId: kotlin.Int, request: InlineObject31Model): WebhookMinusConfigModel {
        val path = "/orgs/{org}/hooks/{hook_id}/config".replace("{"+"org"+"}", "$org").replace("{"+"hook_id"+"}", "$hookId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
