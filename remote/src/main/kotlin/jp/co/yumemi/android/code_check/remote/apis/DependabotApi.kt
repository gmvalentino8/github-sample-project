/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.remote.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface DependabotApi {
    /**
    * Add selected repository to an organization secret
    *
    * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun dependabotAddSelectedRepoToOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Create or update an organization secret
    *
    * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun dependabotCreateOrUpdateOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, request: InlineObject28ApiModel): kotlin.Any

    /**
    * Create or update a repository secret
    *
    * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun dependabotCreateOrUpdateRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, request: InlineObject80ApiModel): kotlin.Any

    /**
    * Delete an organization secret
    *
    * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun dependabotDeleteOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String)

    /**
    * Delete a repository secret
    *
    * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    *
    * @return void
    */
    suspend fun dependabotDeleteRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String)

    /**
    * Get an organization public key
    *
    * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return DependabotMinusPublicMinusKeyApiModel
    */
    suspend fun dependabotGetOrgPublicKey(accessToken: String? = null, org: kotlin.String): DependabotMinusPublicMinusKeyApiModel

    /**
    * Get an organization secret
    *
    * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return OrganizationMinusDependabotMinusSecretApiModel
    */
    suspend fun dependabotGetOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String): OrganizationMinusDependabotMinusSecretApiModel

    /**
    * Get a repository public key
    *
    * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    *
    * @return DependabotMinusPublicMinusKeyApiModel
    */
    suspend fun dependabotGetRepoPublicKey(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): DependabotMinusPublicMinusKeyApiModel

    /**
    * Get a repository secret
    *
    * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    *
    * @return DependabotMinusSecretApiModel
    */
    suspend fun dependabotGetRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): DependabotMinusSecretApiModel

    /**
    * List organization secrets
    *
    * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return InlineResponse20011ApiModel
    */
    suspend fun dependabotListOrgSecrets(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20011ApiModel

    /**
    * List repository secrets
    *
    * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; repository permission to use this endpoint.
    *
    * @return InlineResponse20022ApiModel
    */
    suspend fun dependabotListRepoSecrets(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20022ApiModel

    /**
    * List selected repositories for an organization secret
    *
    * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return InlineResponse20010ApiModel
    */
    suspend fun dependabotListSelectedReposForOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): InlineResponse20010ApiModel

    /**
    * Remove selected repository from an organization secret
    *
    * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun dependabotRemoveSelectedRepoFromOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Set selected repositories for an organization secret
    *
    * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;dependabot_secrets&#x60; organization permission to use this endpoint.
    *
    * @param request 
    * @return void
    */
    suspend fun dependabotSetSelectedReposForOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, request: InlineObject29ApiModel)

}

class HttpClientDependabotApi(private val httpClientProvider: HttpClientProvider) : DependabotApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun dependabotAddSelectedRepoToOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun dependabotCreateOrUpdateOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, request: InlineObject28ApiModel): kotlin.Any {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun dependabotCreateOrUpdateRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, request: InlineObject80ApiModel): kotlin.Any {
        val path = "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun dependabotDeleteOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String) {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun dependabotDeleteRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String) {
        val path = "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun dependabotGetOrgPublicKey(accessToken: String?, org: kotlin.String): DependabotMinusPublicMinusKeyApiModel {
        val path = "/orgs/{org}/dependabot/secrets/public-key".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun dependabotGetOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String): OrganizationMinusDependabotMinusSecretApiModel {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun dependabotGetRepoPublicKey(accessToken: String?, owner: kotlin.String, repo: kotlin.String): DependabotMinusPublicMinusKeyApiModel {
        val path = "/repos/{owner}/{repo}/dependabot/secrets/public-key".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun dependabotGetRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): DependabotMinusSecretApiModel {
        val path = "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun dependabotListOrgSecrets(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20011ApiModel {
        val path = "/orgs/{org}/dependabot/secrets".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun dependabotListRepoSecrets(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20022ApiModel {
        val path = "/repos/{owner}/{repo}/dependabot/secrets".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun dependabotListSelectedReposForOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): InlineResponse20010ApiModel {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("perPage", perPage)
        }
    }

    override suspend fun dependabotRemoveSelectedRepoFromOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun dependabotSetSelectedReposForOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, request: InlineObject29ApiModel) {
        val path = "/orgs/{org}/dependabot/secrets/{secret_name}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

}
