/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models

import jp.co.yumemi.android.code_check.remote.models.NullableMinusTeamMinusSimpleApiModel
import jp.co.yumemi.android.code_check.remote.models.OrganizationMinusFullApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Groups of organization members that gives permissions on specified repositories.
 * @param id Unique identifier of the team
 * @param nodeId 
 * @param url URL for the team
 * @param htmlUrl 
 * @param name Name of the team
 * @param slug 
 * @param description 
 * @param permission Permission that the team will have for its repositories
 * @param membersUrl 
 * @param repositoriesUrl 
 * @param membersCount 
 * @param reposCount 
 * @param createdAt 
 * @param updatedAt 
 * @param organization 
 * @param privacy The level of privacy this team should have
 * @param parent 
 * @param ldapDn Distinguished Name (DN) that team maps to within LDAP environment
 */
@Serializable
data class TeamMinusFullApiModel(
    /* Unique identifier of the team */
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,
    /* URL for the team */
    @SerialName(value = "url")
    val url: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    /* Name of the team */
    @SerialName(value = "name")
    val name: kotlin.String,
    @SerialName(value = "slug")
    val slug: kotlin.String,
    @SerialName(value = "description")
    val description: kotlin.String?,
    /* Permission that the team will have for its repositories */
    @SerialName(value = "permission")
    val permission: kotlin.String,
    @SerialName(value = "members_url")
    val membersUrl: kotlin.String,
    @SerialName(value = "repositories_url")
    val repositoriesUrl: kotlin.String,
    @SerialName(value = "members_count")
    val membersCount: kotlin.Int,
    @SerialName(value = "repos_count")
    val reposCount: kotlin.Int,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    @SerialName(value = "organization")
    val organization: OrganizationMinusFullApiModel,
    /* The level of privacy this team should have */
    @SerialName(value = "privacy")
    val privacy: TeamMinusFullApiModel.Privacy? = null,
    @SerialName(value = "parent")
    val parent: NullableMinusTeamMinusSimpleApiModel? = null,
    /* Distinguished Name (DN) that team maps to within LDAP environment */
    @SerialName(value = "ldap_dn")
    val ldapDn: kotlin.String? = null
) {

    /**
     * The level of privacy this team should have
     * Values: closed,secret
     */
    @Serializable(with = Privacy.Serializer::class)
    enum class Privacy(val value: kotlin.String) {
        closed("closed"),
        secret("secret");

        @kotlinx.serialization.Serializer(forClass = Privacy::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): Privacy {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "TeamMinusFullApiModel.Privacy.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: Privacy) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

