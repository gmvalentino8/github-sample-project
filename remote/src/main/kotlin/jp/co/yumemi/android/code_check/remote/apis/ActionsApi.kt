/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.data.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface ActionsApi {
    /**
    * Add custom labels to a self-hosted runner for an organization
    *
    * Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return InlineResponse2008Model
    */
    suspend fun actionsAddCustomLabelsToSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int, request: InlineObject25Model): InlineResponse2008Model

    /**
    * Add custom labels to a self-hosted runner for a repository
    *
    * Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return InlineResponse2008Model
    */
    suspend fun actionsAddCustomLabelsToSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, request: InlineObject60Model): InlineResponse2008Model

    /**
    * Add repository access to a self-hosted runner group in an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, repositoryId: kotlin.Int)

    /**
    * Add selected repository to an organization secret
    *
    * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsAddSelectedRepoToOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Add a self-hosted runner to a group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Adds a self-hosted runner to a runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsAddSelfHostedRunnerToGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, runnerId: kotlin.Int)

    /**
    * Approve a workflow run for a fork pull request
    *
    * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return kotlin.Any
    */
    suspend fun actionsApproveWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any

    /**
    * Cancel a workflow run
    *
    * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return kotlin.Any
    */
    suspend fun actionsCancelWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any

    /**
    * Create or update an environment secret
    *
    * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun actionsCreateOrUpdateEnvironmentSecret(accessToken: String? = null, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String, request: InlineObject141Model): kotlin.Any

    /**
    * Create or update an organization secret
    *
    * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun actionsCreateOrUpdateOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, request: InlineObject26Model): kotlin.Any

    /**
    * Create or update a repository secret
    *
    * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
    *
    * @param request 
    * @return kotlin.Any
    */
    suspend fun actionsCreateOrUpdateRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, request: InlineObject62Model): kotlin.Any

    /**
    * Create a registration token for an organization
    *
    * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
    *
    * @return AuthenticationMinusTokenModel
    */
    suspend fun actionsCreateRegistrationTokenForOrg(accessToken: String? = null, org: kotlin.String): AuthenticationMinusTokenModel

    /**
    * Create a registration token for a repository
    *
    * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
    *
    * @return AuthenticationMinusTokenModel
    */
    suspend fun actionsCreateRegistrationTokenForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): AuthenticationMinusTokenModel

    /**
    * Create a remove token for an organization
    *
    * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
    *
    * @return AuthenticationMinusTokenModel
    */
    suspend fun actionsCreateRemoveTokenForOrg(accessToken: String? = null, org: kotlin.String): AuthenticationMinusTokenModel

    /**
    * Create a remove token for a repository
    *
    * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
    *
    * @return AuthenticationMinusTokenModel
    */
    suspend fun actionsCreateRemoveTokenForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): AuthenticationMinusTokenModel

    /**
    * Create a self-hosted runner group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return RunnerMinusGroupsMinusOrgModel
    */
    suspend fun actionsCreateSelfHostedRunnerGroupForOrg(accessToken: String? = null, org: kotlin.String, request: InlineObject20Model): RunnerMinusGroupsMinusOrgModel

    /**
    * Create a workflow dispatch event
    *
    * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
    *
    * @param request 
    * @return void
    */
    suspend fun actionsCreateWorkflowDispatch(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int, request: InlineObject63Model)

    /**
    * Delete an artifact
    *
    * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteArtifact(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int)

    /**
    * Delete an environment secret
    *
    * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteEnvironmentSecret(accessToken: String? = null, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String)

    /**
    * Delete an organization secret
    *
    * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String)

    /**
    * Delete a repository secret
    *
    * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String)

    /**
    * Delete a self-hosted runner from an organization
    *
    * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteSelfHostedRunnerFromOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int)

    /**
    * Delete a self-hosted runner from a repository
    *
    * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteSelfHostedRunnerFromRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int)

    /**
    * Delete a self-hosted runner group from an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Deletes a self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteSelfHostedRunnerGroupFromOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int)

    /**
    * Delete a workflow run
    *
    * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int)

    /**
    * Delete workflow run logs
    *
    * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDeleteWorkflowRunLogs(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int)

    /**
    * Disable a selected repository for GitHub Actions in an organization
    *
    * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return void
    */
    suspend fun actionsDisableSelectedRepositoryGithubActionsOrganization(accessToken: String? = null, org: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Disable a workflow
    *
    * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDisableWorkflow(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int)

    /**
    * Download an artifact
    *
    * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDownloadArtifact(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int, archiveFormat: kotlin.String)

    /**
    * Download job logs for a workflow run
    *
    * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDownloadJobLogsForWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int)

    /**
    * Download workflow run attempt logs
    *
    * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDownloadWorkflowRunAttemptLogs(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int)

    /**
    * Download workflow run logs
    *
    * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsDownloadWorkflowRunLogs(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int)

    /**
    * Enable a selected repository for GitHub Actions in an organization
    *
    * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return void
    */
    suspend fun actionsEnableSelectedRepositoryGithubActionsOrganization(accessToken: String? = null, org: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Enable a workflow
    *
    * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsEnableWorkflow(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int)

    /**
    * Get allowed actions for an organization
    *
    * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return SelectedMinusActionsModel
    */
    suspend fun actionsGetAllowedActionsOrganization(accessToken: String? = null, org: kotlin.String): SelectedMinusActionsModel

    /**
    * Get allowed actions for a repository
    *
    * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    *
    * @return SelectedMinusActionsModel
    */
    suspend fun actionsGetAllowedActionsRepository(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): SelectedMinusActionsModel

    /**
    * Get an artifact
    *
    * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return ArtifactModel
    */
    suspend fun actionsGetArtifact(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int): ArtifactModel

    /**
    * Get an environment public key
    *
    * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return ActionsMinusPublicMinusKeyModel
    */
    suspend fun actionsGetEnvironmentPublicKey(accessToken: String? = null, repositoryId: kotlin.Int, environmentName: kotlin.String): ActionsMinusPublicMinusKeyModel

    /**
    * Get an environment secret
    *
    * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return ActionsMinusSecretModel
    */
    suspend fun actionsGetEnvironmentSecret(accessToken: String? = null, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String): ActionsMinusSecretModel

    /**
    * Get default workflow permissions
    *
    * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well if GitHub Actions can submit approving pull request reviews.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return ActionsMinusGetMinusDefaultMinusWorkflowMinusPermissionsModel
    */
    suspend fun actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(accessToken: String? = null, org: kotlin.String): ActionsMinusGetMinusDefaultMinusWorkflowMinusPermissionsModel

    /**
    * Get GitHub Actions permissions for an organization
    *
    * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return ActionsMinusOrganizationMinusPermissionsModel
    */
    suspend fun actionsGetGithubActionsPermissionsOrganization(accessToken: String? = null, org: kotlin.String): ActionsMinusOrganizationMinusPermissionsModel

    /**
    * Get GitHub Actions permissions for a repository
    *
    * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    *
    * @return ActionsMinusRepositoryMinusPermissionsModel
    */
    suspend fun actionsGetGithubActionsPermissionsRepository(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): ActionsMinusRepositoryMinusPermissionsModel

    /**
    * Get a job for a workflow run
    *
    * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return JobModel
    */
    suspend fun actionsGetJobForWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int): JobModel

    /**
    * Get an organization public key
    *
    * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return ActionsMinusPublicMinusKeyModel
    */
    suspend fun actionsGetOrgPublicKey(accessToken: String? = null, org: kotlin.String): ActionsMinusPublicMinusKeyModel

    /**
    * Get an organization secret
    *
    * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return OrganizationMinusActionsMinusSecretModel
    */
    suspend fun actionsGetOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String): OrganizationMinusActionsMinusSecretModel

    /**
    * Get pending deployments for a workflow run
    *
    * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return kotlin.collections.List<PendingMinusDeploymentModel>
    */
    suspend fun actionsGetPendingDeploymentsForRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.collections.List<PendingMinusDeploymentModel>

    /**
    * Get a repository public key
    *
    * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return ActionsMinusPublicMinusKeyModel
    */
    suspend fun actionsGetRepoPublicKey(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): ActionsMinusPublicMinusKeyModel

    /**
    * Get a repository secret
    *
    * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return ActionsMinusSecretModel
    */
    suspend fun actionsGetRepoSecret(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): ActionsMinusSecretModel

    /**
    * Get the review history for a workflow run
    *
    * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return kotlin.collections.List<EnvironmentMinusApprovalsModel>
    */
    suspend fun actionsGetReviewsForRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.collections.List<EnvironmentMinusApprovalsModel>

    /**
    * Get a self-hosted runner for an organization
    *
    * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return RunnerModel
    */
    suspend fun actionsGetSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int): RunnerModel

    /**
    * Get a self-hosted runner for a repository
    *
    * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return RunnerModel
    */
    suspend fun actionsGetSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): RunnerModel

    /**
    * Get a self-hosted runner group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Gets a specific self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return RunnerMinusGroupsMinusOrgModel
    */
    suspend fun actionsGetSelfHostedRunnerGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int): RunnerMinusGroupsMinusOrgModel

    /**
    * Get a workflow
    *
    * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return WorkflowModel
    */
    suspend fun actionsGetWorkflow(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int): WorkflowModel

    /**
    * Get a workflow run
    *
    * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return WorkflowMinusRunModel
    */
    suspend fun actionsGetWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, excludePullRequests: kotlin.Boolean? = null): WorkflowMinusRunModel

    /**
    * Get a workflow run attempt
    *
    * Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return WorkflowMinusRunModel
    */
    suspend fun actionsGetWorkflowRunAttempt(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, excludePullRequests: kotlin.Boolean? = null): WorkflowMinusRunModel

    /**
    * Get workflow run usage
    *
    * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return WorkflowMinusRunMinusUsageModel
    */
    suspend fun actionsGetWorkflowRunUsage(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): WorkflowMinusRunMinusUsageModel

    /**
    * Get workflow usage
    *
    * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return WorkflowMinusUsageModel
    */
    suspend fun actionsGetWorkflowUsage(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int): WorkflowMinusUsageModel

    /**
    * List artifacts for a repository
    *
    * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return InlineResponse20013Model
    */
    suspend fun actionsListArtifactsForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20013Model

    /**
    * List environment secrets
    *
    * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return InlineResponse20016Model
    */
    suspend fun actionsListEnvironmentSecrets(accessToken: String? = null, repositoryId: kotlin.Int, environmentName: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20016Model

    /**
    * List jobs for a workflow run
    *
    * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    *
    * @return InlineResponse20015Model
    */
    suspend fun actionsListJobsForWorkflowRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, filter: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20015Model

    /**
    * List jobs for a workflow run attempt
    *
    * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    *
    * @return InlineResponse20015Model
    */
    suspend fun actionsListJobsForWorkflowRunAttempt(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20015Model

    /**
    * List labels for a self-hosted runner for an organization
    *
    * Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsListLabelsForSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model

    /**
    * List labels for a self-hosted runner for a repository
    *
    * Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsListLabelsForSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model

    /**
    * List organization secrets
    *
    * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return InlineResponse2009Model
    */
    suspend fun actionsListOrgSecrets(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2009Model

    /**
    * List repository access to a self-hosted runner group in an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2005Model
    */
    suspend fun actionsListRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, page: kotlin.Int? = null, perPage: kotlin.Int? = null): InlineResponse2005Model

    /**
    * List repository secrets
    *
    * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
    *
    * @return InlineResponse20016Model
    */
    suspend fun actionsListRepoSecrets(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20016Model

    /**
    * List repository workflows
    *
    * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return InlineResponse20017Model
    */
    suspend fun actionsListRepoWorkflows(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20017Model

    /**
    * List runner applications for an organization
    *
    * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return kotlin.collections.List<RunnerMinusApplicationModel>
    */
    suspend fun actionsListRunnerApplicationsForOrg(accessToken: String? = null, org: kotlin.String): kotlin.collections.List<RunnerMinusApplicationModel>

    /**
    * List runner applications for a repository
    *
    * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return kotlin.collections.List<RunnerMinusApplicationModel>
    */
    suspend fun actionsListRunnerApplicationsForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): kotlin.collections.List<RunnerMinusApplicationModel>

    /**
    * List selected repositories for an organization secret
    *
    * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return InlineResponse20010Model
    */
    suspend fun actionsListSelectedReposForOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): InlineResponse20010Model

    /**
    * List selected repositories enabled for GitHub Actions in an organization
    *
    * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @return InlineResponse2003Model
    */
    suspend fun actionsListSelectedRepositoriesEnabledGithubActionsOrganization(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2003Model

    /**
    * List self-hosted runner groups for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2004Model
    */
    suspend fun actionsListSelfHostedRunnerGroupsForOrg(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2004Model

    /**
    * List self-hosted runners for an organization
    *
    * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2007Model
    */
    suspend fun actionsListSelfHostedRunnersForOrg(accessToken: String? = null, org: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2007Model

    /**
    * List self-hosted runners for a repository
    *
    * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2007Model
    */
    suspend fun actionsListSelfHostedRunnersForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2007Model

    /**
    * List self-hosted runners in a group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists self-hosted runners that are in a specific organization group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2006Model
    */
    suspend fun actionsListSelfHostedRunnersInGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2006Model

    /**
    * List workflow run artifacts
    *
    * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return InlineResponse20013Model
    */
    suspend fun actionsListWorkflowRunArtifacts(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20013Model

    /**
    * List workflow runs
    *
    * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
    *
    * @return InlineResponse20014Model
    */
    suspend fun actionsListWorkflowRuns(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int, actor: kotlin.String? = null, branch: kotlin.String? = null, event: kotlin.String? = null, status: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null, created: kotlin.String? = null, excludePullRequests: kotlin.Boolean? = null, checkSuiteId: kotlin.Int? = null): InlineResponse20014Model

    /**
    * List workflow runs for a repository
    *
    * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
    *
    * @return InlineResponse20014Model
    */
    suspend fun actionsListWorkflowRunsForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, actor: kotlin.String? = null, branch: kotlin.String? = null, event: kotlin.String? = null, status: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null, created: kotlin.String? = null, excludePullRequests: kotlin.Boolean? = null, checkSuiteId: kotlin.Int? = null): InlineResponse20014Model

    /**
    * Re-run a workflow
    *
    * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
    *
    * @return kotlin.Any
    */
    suspend fun actionsReRunWorkflow(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any

    /**
    * Remove all custom labels from a self-hosted runner for an organization
    *
    * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model

    /**
    * Remove all custom labels from a self-hosted runner for a repository
    *
    * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model

    /**
    * Remove a custom label from a self-hosted runner for an organization
    *
    * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): InlineResponse2008Model

    /**
    * Remove a custom label from a self-hosted runner for a repository
    *
    * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @return InlineResponse2008Model
    */
    suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): InlineResponse2008Model

    /**
    * Remove repository access to a self-hosted runner group in an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, repositoryId: kotlin.Int)

    /**
    * Remove selected repository from an organization secret
    *
    * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsRemoveSelectedRepoFromOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int)

    /**
    * Remove a self-hosted runner from a group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;   Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @return void
    */
    suspend fun actionsRemoveSelfHostedRunnerFromGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, runnerId: kotlin.Int)

    /**
    * Review pending deployments for a workflow run
    *
    * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Anyone with read access to the repository contents and deployments can use this endpoint.
    *
    * @param request 
    * @return kotlin.collections.List<DeploymentModel>
    */
    suspend fun actionsReviewPendingDeploymentsForRun(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, request: InlineObject61Model): kotlin.collections.List<DeploymentModel>

    /**
    * Set allowed actions for an organization
    *
    * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @param request  (optional)
    * @return void
    */
    suspend fun actionsSetAllowedActionsOrganization(accessToken: String? = null, org: kotlin.String, request: SelectedMinusActionsModel)

    /**
    * Set allowed actions for a repository
    *
    * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    *
    * @param request  (optional)
    * @return void
    */
    suspend fun actionsSetAllowedActionsRepository(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, request: SelectedMinusActionsModel)

    /**
    * Set custom labels for a self-hosted runner for an organization
    *
    * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return InlineResponse2008Model
    */
    suspend fun actionsSetCustomLabelsForSelfHostedRunnerForOrg(accessToken: String? = null, org: kotlin.String, runnerId: kotlin.Int, request: InlineObject24Model): InlineResponse2008Model

    /**
    * Set custom labels for a self-hosted runner for a repository
    *
    * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return InlineResponse2008Model
    */
    suspend fun actionsSetCustomLabelsForSelfHostedRunnerForRepo(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, request: InlineObject59Model): InlineResponse2008Model

    /**
    * Set default workflow permissions
    *
    * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @param request  (optional)
    * @return void
    */
    suspend fun actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(accessToken: String? = null, org: kotlin.String, request: ActionsMinusSetMinusDefaultMinusWorkflowMinusPermissionsModel)

    /**
    * Set GitHub Actions permissions for an organization
    *
    * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetGithubActionsPermissionsOrganization(accessToken: String? = null, org: kotlin.String, request: InlineObject18Model)

    /**
    * Set GitHub Actions permissions for a repository
    *
    * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetGithubActionsPermissionsRepository(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String, request: InlineObject58Model)

    /**
    * Set repository access for a self-hosted runner group in an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject22Model)

    /**
    * Set selected repositories for an organization secret
    *
    * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetSelectedReposForOrgSecret(accessToken: String? = null, org: kotlin.String, secretName: kotlin.String, request: InlineObject27Model)

    /**
    * Set selected repositories enabled for GitHub Actions in an organization
    *
    * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(accessToken: String? = null, org: kotlin.String, request: InlineObject19Model)

    /**
    * Set self-hosted runners in a group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Replaces the list of self-hosted runners that are part of an organization runner group.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return void
    */
    suspend fun actionsSetSelfHostedRunnersInGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject23Model)

    /**
    * Update a self-hosted runner group for an organization
    *
    * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
    *
    * @param request 
    * @return RunnerMinusGroupsMinusOrgModel
    */
    suspend fun actionsUpdateSelfHostedRunnerGroupForOrg(accessToken: String? = null, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject21Model): RunnerMinusGroupsMinusOrgModel

}

class HttpClientActionsApi(private val httpClientProvider: HttpClientProvider) : ActionsApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun actionsAddCustomLabelsToSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int, request: InlineObject25Model): InlineResponse2008Model {
        val path = "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun actionsAddCustomLabelsToSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, request: InlineObject60Model): InlineResponse2008Model {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsAddSelectedRepoToOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsAddSelfHostedRunnerToGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, runnerId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsApproveWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/approve".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCancelWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCreateOrUpdateEnvironmentSecret(accessToken: String?, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String, request: InlineObject141Model): kotlin.Any {
        val path = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}".replace("{"+"repository_id"+"}", "$repositoryId").replace("{"+"environment_name"+"}", "$environmentName").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsCreateOrUpdateOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, request: InlineObject26Model): kotlin.Any {
        val path = "/orgs/{org}/actions/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsCreateOrUpdateRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, request: InlineObject62Model): kotlin.Any {
        val path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsCreateRegistrationTokenForOrg(accessToken: String?, org: kotlin.String): AuthenticationMinusTokenModel {
        val path = "/orgs/{org}/actions/runners/registration-token".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCreateRegistrationTokenForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String): AuthenticationMinusTokenModel {
        val path = "/repos/{owner}/{repo}/actions/runners/registration-token".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCreateRemoveTokenForOrg(accessToken: String?, org: kotlin.String): AuthenticationMinusTokenModel {
        val path = "/orgs/{org}/actions/runners/remove-token".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCreateRemoveTokenForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String): AuthenticationMinusTokenModel {
        val path = "/repos/{owner}/{repo}/actions/runners/remove-token".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsCreateSelfHostedRunnerGroupForOrg(accessToken: String?, org: kotlin.String, request: InlineObject20Model): RunnerMinusGroupsMinusOrgModel {
        val path = "/orgs/{org}/actions/runner-groups".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun actionsCreateWorkflowDispatch(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int, request: InlineObject63Model) {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun actionsDeleteArtifact(accessToken: String?, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"artifact_id"+"}", "$artifactId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteEnvironmentSecret(accessToken: String?, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String) {
        val path = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}".replace("{"+"repository_id"+"}", "$repositoryId").replace("{"+"environment_name"+"}", "$environmentName").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String) {
        val path = "/orgs/{org}/actions/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String) {
        val path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteSelfHostedRunnerFromOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runners/{runner_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteSelfHostedRunnerFromRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteSelfHostedRunnerGroupFromOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDeleteWorkflowRunLogs(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDisableSelectedRepositoryGithubActionsOrganization(accessToken: String?, org: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/permissions/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsDisableWorkflow(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsDownloadArtifact(accessToken: String?, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int, archiveFormat: kotlin.String) {
        val path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"artifact_id"+"}", "$artifactId").replace("{"+"archive_format"+"}", "$archiveFormat")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsDownloadJobLogsForWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"job_id"+"}", "$jobId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsDownloadWorkflowRunAttemptLogs(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId").replace("{"+"attempt_number"+"}", "$attemptNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsDownloadWorkflowRunLogs(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsEnableSelectedRepositoryGithubActionsOrganization(accessToken: String?, org: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/permissions/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsEnableWorkflow(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int) {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun actionsGetAllowedActionsOrganization(accessToken: String?, org: kotlin.String): SelectedMinusActionsModel {
        val path = "/orgs/{org}/actions/permissions/selected-actions".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetAllowedActionsRepository(accessToken: String?, owner: kotlin.String, repo: kotlin.String): SelectedMinusActionsModel {
        val path = "/repos/{owner}/{repo}/actions/permissions/selected-actions".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetArtifact(accessToken: String?, owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int): ArtifactModel {
        val path = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"artifact_id"+"}", "$artifactId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetEnvironmentPublicKey(accessToken: String?, repositoryId: kotlin.Int, environmentName: kotlin.String): ActionsMinusPublicMinusKeyModel {
        val path = "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key".replace("{"+"repository_id"+"}", "$repositoryId").replace("{"+"environment_name"+"}", "$environmentName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetEnvironmentSecret(accessToken: String?, repositoryId: kotlin.Int, environmentName: kotlin.String, secretName: kotlin.String): ActionsMinusSecretModel {
        val path = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}".replace("{"+"repository_id"+"}", "$repositoryId").replace("{"+"environment_name"+"}", "$environmentName").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(accessToken: String?, org: kotlin.String): ActionsMinusGetMinusDefaultMinusWorkflowMinusPermissionsModel {
        val path = "/orgs/{org}/actions/permissions/workflow".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetGithubActionsPermissionsOrganization(accessToken: String?, org: kotlin.String): ActionsMinusOrganizationMinusPermissionsModel {
        val path = "/orgs/{org}/actions/permissions".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetGithubActionsPermissionsRepository(accessToken: String?, owner: kotlin.String, repo: kotlin.String): ActionsMinusRepositoryMinusPermissionsModel {
        val path = "/repos/{owner}/{repo}/actions/permissions".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetJobForWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int): JobModel {
        val path = "/repos/{owner}/{repo}/actions/jobs/{job_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"job_id"+"}", "$jobId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetOrgPublicKey(accessToken: String?, org: kotlin.String): ActionsMinusPublicMinusKeyModel {
        val path = "/orgs/{org}/actions/secrets/public-key".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String): OrganizationMinusActionsMinusSecretModel {
        val path = "/orgs/{org}/actions/secrets/{secret_name}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetPendingDeploymentsForRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.collections.List<PendingMinusDeploymentModel> {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetRepoPublicKey(accessToken: String?, owner: kotlin.String, repo: kotlin.String): ActionsMinusPublicMinusKeyModel {
        val path = "/repos/{owner}/{repo}/actions/secrets/public-key".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetRepoSecret(accessToken: String?, owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): ActionsMinusSecretModel {
        val path = "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetReviewsForRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.collections.List<EnvironmentMinusApprovalsModel> {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int): RunnerModel {
        val path = "/orgs/{org}/actions/runners/{runner_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): RunnerModel {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetSelfHostedRunnerGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int): RunnerMinusGroupsMinusOrgModel {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetWorkflow(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int): WorkflowModel {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, excludePullRequests: kotlin.Boolean?): WorkflowMinusRunModel {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("excludePullRequests", excludePullRequests)
        }
    }

    override suspend fun actionsGetWorkflowRunAttempt(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, excludePullRequests: kotlin.Boolean?): WorkflowMinusRunModel {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId").replace("{"+"attempt_number"+"}", "$attemptNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("excludePullRequests", excludePullRequests)
        }
    }

    override suspend fun actionsGetWorkflowRunUsage(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): WorkflowMinusRunMinusUsageModel {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/timing".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsGetWorkflowUsage(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int): WorkflowMinusUsageModel {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsListArtifactsForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20013Model {
        val path = "/repos/{owner}/{repo}/actions/artifacts".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListEnvironmentSecrets(accessToken: String?, repositoryId: kotlin.Int, environmentName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20016Model {
        val path = "/repositories/{repository_id}/environments/{environment_name}/secrets".replace("{"+"repository_id"+"}", "$repositoryId").replace("{"+"environment_name"+"}", "$environmentName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListJobsForWorkflowRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20015Model {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("filter", filter)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListJobsForWorkflowRunAttempt(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20015Model {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId").replace("{"+"attempt_number"+"}", "$attemptNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListLabelsForSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model {
        val path = "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsListLabelsForSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsListOrgSecrets(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2009Model {
        val path = "/orgs/{org}/actions/secrets".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, page: kotlin.Int?, perPage: kotlin.Int?): InlineResponse2005Model {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("perPage", perPage)
        }
    }

    override suspend fun actionsListRepoSecrets(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20016Model {
        val path = "/repos/{owner}/{repo}/actions/secrets".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListRepoWorkflows(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20017Model {
        val path = "/repos/{owner}/{repo}/actions/workflows".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListRunnerApplicationsForOrg(accessToken: String?, org: kotlin.String): kotlin.collections.List<RunnerMinusApplicationModel> {
        val path = "/orgs/{org}/actions/runners/downloads".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsListRunnerApplicationsForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String): kotlin.collections.List<RunnerMinusApplicationModel> {
        val path = "/repos/{owner}/{repo}/actions/runners/downloads".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun actionsListSelectedReposForOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): InlineResponse20010Model {
        val path = "/orgs/{org}/actions/secrets/{secret_name}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("page", page)
            parameter("perPage", perPage)
        }
    }

    override suspend fun actionsListSelectedRepositoriesEnabledGithubActionsOrganization(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2003Model {
        val path = "/orgs/{org}/actions/permissions/repositories".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListSelfHostedRunnerGroupsForOrg(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2004Model {
        val path = "/orgs/{org}/actions/runner-groups".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListSelfHostedRunnersForOrg(accessToken: String?, org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2007Model {
        val path = "/orgs/{org}/actions/runners".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListSelfHostedRunnersForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2007Model {
        val path = "/repos/{owner}/{repo}/actions/runners".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListSelfHostedRunnersInGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2006Model {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListWorkflowRunArtifacts(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20013Model {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun actionsListWorkflowRuns(accessToken: String?, owner: kotlin.String, repo: kotlin.String, workflowId: kotlin.Int, actor: kotlin.String?, branch: kotlin.String?, event: kotlin.String?, status: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, created: kotlin.String?, excludePullRequests: kotlin.Boolean?, checkSuiteId: kotlin.Int?): InlineResponse20014Model {
        val path = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"workflow_id"+"}", "$workflowId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("actor", actor)
            parameter("branch", branch)
            parameter("event", event)
            parameter("status", status)
            parameter("perPage", perPage)
            parameter("page", page)
            parameter("created", created)
            parameter("excludePullRequests", excludePullRequests)
            parameter("checkSuiteId", checkSuiteId)
        }
    }

    override suspend fun actionsListWorkflowRunsForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, actor: kotlin.String?, branch: kotlin.String?, event: kotlin.String?, status: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, created: kotlin.String?, excludePullRequests: kotlin.Boolean?, checkSuiteId: kotlin.Int?): InlineResponse20014Model {
        val path = "/repos/{owner}/{repo}/actions/runs".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("actor", actor)
            parameter("branch", branch)
            parameter("event", event)
            parameter("status", status)
            parameter("perPage", perPage)
            parameter("page", page)
            parameter("created", created)
            parameter("excludePullRequests", excludePullRequests)
            parameter("checkSuiteId", checkSuiteId)
        }
    }

    override suspend fun actionsReRunWorkflow(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): kotlin.Any {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model {
        val path = "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): InlineResponse2008Model {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): InlineResponse2008Model {
        val path = "/orgs/{org}/actions/runners/{runner_id}/labels/{name}".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId").replace("{"+"name"+"}", "$name")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): InlineResponse2008Model {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId").replace("{"+"name"+"}", "$name")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveSelectedRepoFromOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int) {
        val path = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsRemoveSelfHostedRunnerFromGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, runnerId: kotlin.Int) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun actionsReviewPendingDeploymentsForRun(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, request: InlineObject61Model): kotlin.collections.List<DeploymentModel> {
        val path = "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"run_id"+"}", "$runId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun actionsSetAllowedActionsOrganization(accessToken: String?, org: kotlin.String, request: SelectedMinusActionsModel) {
        val path = "/orgs/{org}/actions/permissions/selected-actions".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetAllowedActionsRepository(accessToken: String?, owner: kotlin.String, repo: kotlin.String, request: SelectedMinusActionsModel) {
        val path = "/repos/{owner}/{repo}/actions/permissions/selected-actions".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetCustomLabelsForSelfHostedRunnerForOrg(accessToken: String?, org: kotlin.String, runnerId: kotlin.Int, request: InlineObject24Model): InlineResponse2008Model {
        val path = "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{"+"org"+"}", "$org").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetCustomLabelsForSelfHostedRunnerForRepo(accessToken: String?, owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, request: InlineObject59Model): InlineResponse2008Model {
        val path = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo").replace("{"+"runner_id"+"}", "$runnerId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(accessToken: String?, org: kotlin.String, request: ActionsMinusSetMinusDefaultMinusWorkflowMinusPermissionsModel) {
        val path = "/orgs/{org}/actions/permissions/workflow".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetGithubActionsPermissionsOrganization(accessToken: String?, org: kotlin.String, request: InlineObject18Model) {
        val path = "/orgs/{org}/actions/permissions".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetGithubActionsPermissionsRepository(accessToken: String?, owner: kotlin.String, repo: kotlin.String, request: InlineObject58Model) {
        val path = "/repos/{owner}/{repo}/actions/permissions".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject22Model) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetSelectedReposForOrgSecret(accessToken: String?, org: kotlin.String, secretName: kotlin.String, request: InlineObject27Model) {
        val path = "/orgs/{org}/actions/secrets/{secret_name}/repositories".replace("{"+"org"+"}", "$org").replace("{"+"secret_name"+"}", "$secretName")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(accessToken: String?, org: kotlin.String, request: InlineObject19Model) {
        val path = "/orgs/{org}/actions/permissions/repositories".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsSetSelfHostedRunnersInGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject23Model) {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
            body = request
        }
    }

    override suspend fun actionsUpdateSelfHostedRunnerGroupForOrg(accessToken: String?, org: kotlin.String, runnerGroupId: kotlin.Int, request: InlineObject21Model): RunnerMinusGroupsMinusOrgModel {
        val path = "/orgs/{org}/actions/runner-groups/{runner_group_id}".replace("{"+"org"+"}", "$org").replace("{"+"runner_group_id"+"}", "$runnerGroupId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
