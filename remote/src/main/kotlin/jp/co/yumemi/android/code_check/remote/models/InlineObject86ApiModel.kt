/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models

import jp.co.yumemi.android.code_check.remote.models.ReposOwnerRepoGitCommitsAuthorApiModel
import jp.co.yumemi.android.code_check.remote.models.ReposOwnerRepoGitCommitsCommitterApiModel

import kotlinx.serialization.*

/**
 * 
 * @param message The commit message
 * @param tree The SHA of the tree object this commit points to
 * @param parents The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
 * @param author 
 * @param committer 
 * @param signature The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
 */
@Serializable
data class InlineObject86ApiModel(
    /* The commit message */
    @SerialName(value = "message")
    val message: kotlin.String,
    /* The SHA of the tree object this commit points to */
    @SerialName(value = "tree")
    val tree: kotlin.String,
    /* The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
    @SerialName(value = "parents")
    val parents: kotlin.collections.List<kotlin.String>? = null,
    @SerialName(value = "author")
    val author: ReposOwnerRepoGitCommitsAuthorApiModel? = null,
    @SerialName(value = "committer")
    val committer: ReposOwnerRepoGitCommitsCommitterApiModel? = null,
    /* The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
    @SerialName(value = "signature")
    val signature: kotlin.String? = null
) {

}

