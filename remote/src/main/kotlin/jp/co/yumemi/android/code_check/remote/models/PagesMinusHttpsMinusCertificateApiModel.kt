/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * 
 * @param state 
 * @param description 
 * @param domains Array of the domain set and its alternate name (if it is configured)
 * @param expiresAt 
 */
@Serializable
data class PagesMinusHttpsMinusCertificateApiModel(
    @SerialName(value = "state")
    val state: PagesMinusHttpsMinusCertificateApiModel.State,
    @SerialName(value = "description")
    val description: kotlin.String,
    /* Array of the domain set and its alternate name (if it is configured) */
    @SerialName(value = "domains")
    val domains: kotlin.collections.List<kotlin.String>,
    @SerialName(value = "expires_at")
    val expiresAt: kotlin.String? = null
) {

    /**
     * 
     * Values: new,authorizationCreated,authorizationPending,authorized,authorizationRevoked,issued,uploaded,approved,errored,badAuthz,destroyPending,dnsChanged
     */
    @Serializable(with = State.Serializer::class)
    enum class State(val value: kotlin.String) {
        new("new"),
        authorizationCreated("authorization_created"),
        authorizationPending("authorization_pending"),
        authorized("authorized"),
        authorizationRevoked("authorization_revoked"),
        issued("issued"),
        uploaded("uploaded"),
        approved("approved"),
        errored("errored"),
        badAuthz("bad_authz"),
        destroyPending("destroy_pending"),
        dnsChanged("dns_changed");

        @kotlinx.serialization.Serializer(forClass = State::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): State {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "PagesMinusHttpsMinusCertificateApiModel.State.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: State) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

