/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.remote.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface ReactionsApi {
    /**
    * Create reaction for a commit comment
    *
    * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject76ApiModel): ReactionApiModel

    /**
    * Create reaction for an issue
    *
    * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForIssue(accessToken: String? = null, repoName: kotlin.String, issueNumber: kotlin.Int, request: InlineObject107ApiModel): ReactionApiModel

    /**
    * Create reaction for an issue comment
    *
    * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForIssueComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject101ApiModel): ReactionApiModel

    /**
    * Create reaction for a pull request review comment
    *
    * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForPullRequestReviewComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject119ApiModel): ReactionApiModel

    /**
    * Create reaction for a release
    *
    * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForRelease(accessToken: String? = null, repoName: kotlin.String, releaseId: kotlin.Int, request: InlineObject134ApiModel): ReactionApiModel

    /**
    * Create reaction for a team discussion comment
    *
    * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForTeamDiscussionCommentInOrg(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, request: InlineObject43ApiModel): ReactionApiModel

    /**
    * Create reaction for a team discussion comment (Legacy)
    *
    * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForTeamDiscussionCommentLegacy(accessToken: String? = null, teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, request: InlineObject156ApiModel): ReactionApiModel

    /**
    * Create reaction for a team discussion
    *
    * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForTeamDiscussionInOrg(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, request: InlineObject44ApiModel): ReactionApiModel

    /**
    * Create reaction for a team discussion (Legacy)
    *
    * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
    *
    * @param request 
    * @return ReactionApiModel
    */
    suspend fun reactionsCreateForTeamDiscussionLegacy(accessToken: String? = null, teamId: kotlin.Int, discussionNumber: kotlin.Int, request: InlineObject157ApiModel): ReactionApiModel

    /**
    * Delete a commit comment reaction
    *
    * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    *
    * @return void
    */
    suspend fun reactionsDeleteForCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int)

    /**
    * Delete an issue reaction
    *
    * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
    *
    * @return void
    */
    suspend fun reactionsDeleteForIssue(accessToken: String? = null, repoName: kotlin.String, issueNumber: kotlin.Int, reactionId: kotlin.Int)

    /**
    * Delete an issue comment reaction
    *
    * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    *
    * @return void
    */
    suspend fun reactionsDeleteForIssueComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int)

    /**
    * Delete a pull request comment reaction
    *
    * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    *
    * @return void
    */
    suspend fun reactionsDeleteForPullRequestComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int)

    /**
    * Delete team discussion reaction
    *
    * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    *
    * @return void
    */
    suspend fun reactionsDeleteForTeamDiscussion(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, reactionId: kotlin.Int)

    /**
    * Delete team discussion comment reaction
    *
    * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    *
    * @return void
    */
    suspend fun reactionsDeleteForTeamDiscussionComment(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, reactionId: kotlin.Int)

    /**
    * List reactions for a commit comment
    *
    * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForCommitComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for an issue
    *
    * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForIssue(accessToken: String? = null, repoName: kotlin.String, issueNumber: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for an issue comment
    *
    * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForIssueComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for a pull request review comment
    *
    * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForPullRequestReviewComment(accessToken: String? = null, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for a team discussion comment
    *
    * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForTeamDiscussionCommentInOrg(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for a team discussion comment (Legacy)
    *
    * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForTeamDiscussionCommentLegacy(accessToken: String? = null, teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for a team discussion
    *
    * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForTeamDiscussionInOrg(accessToken: String? = null, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

    /**
    * List reactions for a team discussion (Legacy)
    *
    * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    *
    * @return kotlin.collections.List<ReactionApiModel>
    */
    suspend fun reactionsListForTeamDiscussionLegacy(accessToken: String? = null, teamId: kotlin.Int, discussionNumber: kotlin.Int, content: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<ReactionApiModel>

}

class HttpClientReactionsApi(private val httpClientProvider: HttpClientProvider) : ReactionsApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun reactionsCreateForCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject76ApiModel): ReactionApiModel {
        val path = "/repos/{repo_name}/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForIssue(accessToken: String?, repoName: kotlin.String, issueNumber: kotlin.Int, request: InlineObject107ApiModel): ReactionApiModel {
        val path = "/repos/{repo_name}/issues/{issue_number}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"issue_number"+"}", "$issueNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForIssueComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject101ApiModel): ReactionApiModel {
        val path = "/repos/{repo_name}/issues/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForPullRequestReviewComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, request: InlineObject119ApiModel): ReactionApiModel {
        val path = "/repos/{repo_name}/pulls/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForRelease(accessToken: String?, repoName: kotlin.String, releaseId: kotlin.Int, request: InlineObject134ApiModel): ReactionApiModel {
        val path = "/repos/{repo_name}/releases/{release_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"release_id"+"}", "$releaseId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForTeamDiscussionCommentInOrg(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, request: InlineObject43ApiModel): ReactionApiModel {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"comment_number"+"}", "$commentNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForTeamDiscussionCommentLegacy(accessToken: String?, teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, request: InlineObject156ApiModel): ReactionApiModel {
        val path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{"+"team_id"+"}", "$teamId").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"comment_number"+"}", "$commentNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForTeamDiscussionInOrg(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, request: InlineObject44ApiModel): ReactionApiModel {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsCreateForTeamDiscussionLegacy(accessToken: String?, teamId: kotlin.Int, discussionNumber: kotlin.Int, request: InlineObject157ApiModel): ReactionApiModel {
        val path = "/teams/{team_id}/discussions/{discussion_number}/reactions".replace("{"+"team_id"+"}", "$teamId").replace("{"+"discussion_number"+"}", "$discussionNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun reactionsDeleteForCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/repos/{repo_name}/comments/{comment_id}/reactions/{reaction_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsDeleteForIssue(accessToken: String?, repoName: kotlin.String, issueNumber: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/repos/{repo_name}/issues/{issue_number}/reactions/{reaction_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"issue_number"+"}", "$issueNumber").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsDeleteForIssueComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/repos/{repo_name}/issues/comments/{comment_id}/reactions/{reaction_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsDeleteForPullRequestComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/repos/{repo_name}/pulls/comments/{comment_id}/reactions/{reaction_id}".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsDeleteForTeamDiscussion(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsDeleteForTeamDiscussionComment(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, reactionId: kotlin.Int) {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"comment_number"+"}", "$commentNumber").replace("{"+"reaction_id"+"}", "$reactionId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun reactionsListForCommitComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/repos/{repo_name}/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForIssue(accessToken: String?, repoName: kotlin.String, issueNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/repos/{repo_name}/issues/{issue_number}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"issue_number"+"}", "$issueNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForIssueComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/repos/{repo_name}/issues/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForPullRequestReviewComment(accessToken: String?, repoName: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/repos/{repo_name}/pulls/comments/{comment_id}/reactions".replace("{"+"repo_name"+"}", "$repoName").replace("{"+"comment_id"+"}", "$commentId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForTeamDiscussionCommentInOrg(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"comment_number"+"}", "$commentNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForTeamDiscussionCommentLegacy(accessToken: String?, teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{"+"team_id"+"}", "$teamId").replace("{"+"discussion_number"+"}", "$discussionNumber").replace("{"+"comment_number"+"}", "$commentNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForTeamDiscussionInOrg(accessToken: String?, org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions".replace("{"+"org"+"}", "$org").replace("{"+"team_slug"+"}", "$teamSlug").replace("{"+"discussion_number"+"}", "$discussionNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

    override suspend fun reactionsListForTeamDiscussionLegacy(accessToken: String?, teamId: kotlin.Int, discussionNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<ReactionApiModel> {
        val path = "/teams/{team_id}/discussions/{discussion_number}/reactions".replace("{"+"team_id"+"}", "$teamId").replace("{"+"discussion_number"+"}", "$discussionNumber")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("content", content)
            parameter("per_page", perPage)
            parameter("page", page)
        }
    }

}
