/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.models

import jp.co.yumemi.android.code_check.remote.models.AppMinusPermissionsApiModel
import jp.co.yumemi.android.code_check.remote.models.NullableMinusSimpleMinusUserApiModel
import jp.co.yumemi.android.code_check.remote.models.SimpleMinusUserApiModel

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Installation
 * @param id The ID of the installation.
 * @param account 
 * @param repositorySelection Describe whether all repositories have been selected or there's a selection involved
 * @param accessTokensUrl 
 * @param repositoriesUrl 
 * @param htmlUrl 
 * @param appId 
 * @param targetId The ID of the user or organization this token is being scoped to.
 * @param targetType 
 * @param permissions 
 * @param events 
 * @param createdAt 
 * @param updatedAt 
 * @param singleFileName 
 * @param appSlug 
 * @param suspendedBy 
 * @param suspendedAt 
 * @param hasMultipleSingleFiles 
 * @param singleFilePaths 
 * @param contactEmail 
 */
@Serializable
data class InstallationApiModel(
    /* The ID of the installation. */
    @SerialName(value = "id")
    val id: kotlin.Int,
    @SerialName(value = "account")
    val account: SimpleMinusUserApiModel,
    /* Describe whether all repositories have been selected or there's a selection involved */
    @SerialName(value = "repository_selection")
    val repositorySelection: InstallationApiModel.RepositorySelection,
    @SerialName(value = "access_tokens_url")
    val accessTokensUrl: kotlin.String,
    @SerialName(value = "repositories_url")
    val repositoriesUrl: kotlin.String,
    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,
    @SerialName(value = "app_id")
    val appId: kotlin.Int,
    /* The ID of the user or organization this token is being scoped to. */
    @SerialName(value = "target_id")
    val targetId: kotlin.Int,
    @SerialName(value = "target_type")
    val targetType: kotlin.String,
    @SerialName(value = "permissions")
    val permissions: AppMinusPermissionsApiModel,
    @SerialName(value = "events")
    val events: kotlin.collections.List<kotlin.String>,
    @SerialName(value = "created_at")
    val createdAt: kotlin.String,
    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,
    @SerialName(value = "single_file_name")
    val singleFileName: kotlin.String?,
    @SerialName(value = "app_slug")
    val appSlug: kotlin.String,
    @SerialName(value = "suspended_by")
    val suspendedBy: NullableMinusSimpleMinusUserApiModel?,
    @SerialName(value = "suspended_at")
    val suspendedAt: kotlin.String?,
    @SerialName(value = "has_multiple_single_files")
    val hasMultipleSingleFiles: kotlin.Boolean? = null,
    @SerialName(value = "single_file_paths")
    val singleFilePaths: kotlin.collections.List<kotlin.String>? = null,
    @SerialName(value = "contact_email")
    val contactEmail: kotlin.String? = null
) {

    /**
     * Describe whether all repositories have been selected or there's a selection involved
     * Values: all,selected
     */
    @Serializable(with = RepositorySelection.Serializer::class)
    enum class RepositorySelection(val value: kotlin.String) {
        all("all"),
        selected("selected");

        @kotlinx.serialization.Serializer(forClass = RepositorySelection::class)
        object Serializer {
            override fun deserialize(decoder: Decoder): RepositorySelection {
                val decoded = decoder.decodeString()
                return values().first { it.value == decoded }
            }

            override val descriptor: SerialDescriptor
                get() = PrimitiveSerialDescriptor(
                    "InstallationApiModel.RepositorySelection.Serializer",
                    PrimitiveKind.STRING
                )

            override fun serialize(encoder: Encoder, value: RepositorySelection) {
                return encoder.encodeString(value.value)
            }
        }
    }
}

