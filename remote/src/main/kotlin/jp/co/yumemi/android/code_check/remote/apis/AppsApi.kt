/**
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package jp.co.yumemi.android.code_check.remote.apis

import io.ktor.client.request.request
import jp.co.yumemi.android.code_check.data.models.*
import jp.co.yumemi.android.code_check.remote.core.HttpClientProvider
import io.ktor.client.request.parameter
import io.ktor.http.HttpMethod

interface AppsApi {
    /**
    * Add a repository to an app installation
    *
    * Add a single repository to an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsAddRepoToInstallationForAuthenticatedUser(accessToken: String? = null, installationId: kotlin.Int, repositoryId: kotlin.Int)

    /**
    * Check a token
    *
    * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application &#x60;client_id&#x60; and the password is its &#x60;client_secret&#x60;. Invalid tokens will return &#x60;404 NOT FOUND&#x60;.
    *
    * @param request 
    * @return AuthorizationModel
    */
    suspend fun appsCheckToken(accessToken: String? = null, clientId: kotlin.String, request: InlineObject3Model): AuthorizationModel

    /**
    * Create a GitHub App from a manifest
    *
    * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary &#x60;code&#x60; used to retrieve the GitHub App&#39;s &#x60;id&#x60;, &#x60;pem&#x60; (private key), and &#x60;webhook_secret&#x60;.
    *
    * @param request  (optional)
    * @return IntegrationModel
    */
    suspend fun appsCreateFromManifest(accessToken: String? = null, code: kotlin.String, request: kotlin.Any): IntegrationModel

    /**
    * Create an installation access token for an app
    *
    * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app&#39;s installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of &#x60;401 - Unauthorized&#x60;, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the &#x60;repository_ids&#x60; when creating the token. When you omit &#x60;repository_ids&#x60;, the response does not contain the &#x60;repositories&#x60; key.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @param request  (optional)
    * @return InstallationMinusTokenModel
    */
    suspend fun appsCreateInstallationAccessToken(accessToken: String? = null, installationId: kotlin.Int, request: InlineObject1Model): InstallationMinusTokenModel

    /**
    * Delete an app authorization
    *
    * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application&#39;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password. You must also provide a valid OAuth &#x60;access_token&#x60; as an input parameter and the grant for the token&#39;s owner will be deleted. Deleting an OAuth application&#39;s grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user&#39;s account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
    *
    * @param request 
    * @return void
    */
    suspend fun appsDeleteAuthorization(accessToken: String? = null, clientId: kotlin.String, request: InlineObject2Model)

    /**
    * Delete an installation for the authenticated app
    *
    * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app&#39;s access to your account&#39;s resources, then we recommend the \&quot;[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)\&quot; endpoint.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsDeleteInstallation(accessToken: String? = null, installationId: kotlin.Int)

    /**
    * Delete an app token
    *
    * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application&#39;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password.
    *
    * @param request 
    * @return void
    */
    suspend fun appsDeleteToken(accessToken: String? = null, clientId: kotlin.String, request: InlineObject4Model)

    /**
    * Get the authenticated app
    *
    * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the &#x60;installations_count&#x60; in the response. For more details about your app&#39;s installations, see the \&quot;[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\&quot; endpoint.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return IntegrationModel
    */
    suspend fun appsGetAuthenticated(accessToken: String? = null): IntegrationModel

    /**
    * Get an app
    *
    * **Note**: The &#x60;:app_slug&#x60; is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., &#x60;https://github.com/settings/apps/:app_slug&#x60;).  If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
    *
    * @return IntegrationModel
    */
    suspend fun appsGetBySlug(accessToken: String? = null, appSlug: kotlin.String): IntegrationModel

    /**
    * Get an installation for the authenticated app
    *
    * Enables an authenticated GitHub App to find an installation&#39;s information using the installation id.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return InstallationModel
    */
    suspend fun appsGetInstallation(accessToken: String? = null, installationId: kotlin.Int): InstallationModel

    /**
    * Get an organization installation for the authenticated app
    *
    * Enables an authenticated GitHub App to find the organization&#39;s installation information.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return InstallationModel
    */
    suspend fun appsGetOrgInstallation(accessToken: String? = null, org: kotlin.String): InstallationModel

    /**
    * Get a repository installation for the authenticated app
    *
    * Enables an authenticated GitHub App to find the repository&#39;s installation information. The installation&#39;s account type will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return InstallationModel
    */
    suspend fun appsGetRepoInstallation(accessToken: String? = null, owner: kotlin.String, repo: kotlin.String): InstallationModel

    /**
    * Get a subscription plan for an account
    *
    * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won&#39;t be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return MarketplaceMinusPurchaseModel
    */
    suspend fun appsGetSubscriptionPlanForAccount(accessToken: String? = null, accountId: kotlin.Int): MarketplaceMinusPurchaseModel

    /**
    * Get a subscription plan for an account (stubbed)
    *
    * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won&#39;t be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return MarketplaceMinusPurchaseModel
    */
    suspend fun appsGetSubscriptionPlanForAccountStubbed(accessToken: String? = null, accountId: kotlin.Int): MarketplaceMinusPurchaseModel

    /**
    * Get a user installation for the authenticated app
    *
    * Enables an authenticated GitHub App to find the user’s installation information.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return InstallationModel
    */
    suspend fun appsGetUserInstallation(accessToken: String? = null, username: kotlin.String): InstallationModel

    /**
    * Get a webhook configuration for an app
    *
    * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \&quot;[Creating a GitHub App](/developers/apps/creating-a-github-app).\&quot;  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return WebhookMinusConfigModel
    */
    suspend fun appsGetWebhookConfigForApp(accessToken: String? = null): WebhookMinusConfigModel

    /**
    * List accounts for a plan
    *
    * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won&#39;t be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return kotlin.collections.List<MarketplaceMinusPurchaseModel>
    */
    suspend fun appsListAccountsForPlan(accessToken: String? = null, planId: kotlin.Int, sort: kotlin.String? = null, direction: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MarketplaceMinusPurchaseModel>

    /**
    * List accounts for a plan (stubbed)
    *
    * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won&#39;t be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return kotlin.collections.List<MarketplaceMinusPurchaseModel>
    */
    suspend fun appsListAccountsForPlanStubbed(accessToken: String? = null, planId: kotlin.Int, sort: kotlin.String? = null, direction: kotlin.String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MarketplaceMinusPurchaseModel>

    /**
    * List repositories accessible to the user access token
    *
    * List repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access for an installation.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The access the user has to each repository is included in the hash under the &#x60;permissions&#x60; key.
    *
    * @return InlineResponse20032Model
    */
    suspend fun appsListInstallationReposForAuthenticatedUser(accessToken: String? = null, installationId: kotlin.Int, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20032Model

    /**
    * List installations for the authenticated app
    *
    * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.  The permissions the installation has are included under the &#x60;permissions&#x60; key.
    *
    * @return kotlin.collections.List<InstallationModel>
    */
    suspend fun appsListInstallations(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null, since: kotlin.String? = null, outdated: kotlin.String? = null): kotlin.collections.List<InstallationModel>

    /**
    * List app installations accessible to the user access token
    *
    * Lists installations of your GitHub App that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You can find the permissions for the installation under the &#x60;permissions&#x60; key.
    *
    * @return InlineResponse20012Model
    */
    suspend fun appsListInstallationsForAuthenticatedUser(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse20012Model

    /**
    * List plans
    *
    * Lists all plans that are part of your GitHub Marketplace listing.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return kotlin.collections.List<MarketplaceMinusListingMinusPlanModel>
    */
    suspend fun appsListPlans(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MarketplaceMinusListingMinusPlanModel>

    /**
    * List plans (stubbed)
    *
    * Lists all plans that are part of your GitHub Marketplace listing.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    *
    * @return kotlin.collections.List<MarketplaceMinusListingMinusPlanModel>
    */
    suspend fun appsListPlansStubbed(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<MarketplaceMinusListingMinusPlanModel>

    /**
    * List repositories accessible to the app installation
    *
    * List repositories that an app installation can access.  You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
    *
    * @return InlineResponse2001Model
    */
    suspend fun appsListReposAccessibleToInstallation(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): InlineResponse2001Model

    /**
    * List subscriptions for the authenticated user
    *
    * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
    *
    * @return kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel>
    */
    suspend fun appsListSubscriptionsForAuthenticatedUser(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel>

    /**
    * List subscriptions for the authenticated user (stubbed)
    *
    * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
    *
    * @return kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel>
    */
    suspend fun appsListSubscriptionsForAuthenticatedUserStubbed(accessToken: String? = null, perPage: kotlin.Int? = null, page: kotlin.Int? = null): kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel>

    /**
    * Redeliver a delivery for an app webhook
    *
    * Redeliver a delivery for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return kotlin.Any
    */
    suspend fun appsRedeliverWebhookDelivery(accessToken: String? = null, deliveryId: kotlin.Int): kotlin.Any

    /**
    * Remove a repository from an app installation
    *
    * Remove a single repository from an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsRemoveRepoFromInstallationForAuthenticatedUser(accessToken: String? = null, installationId: kotlin.Int, repositoryId: kotlin.Int)

    /**
    * Reset a token
    *
    * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \&quot;token\&quot; property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application&#39;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password. Invalid tokens will return &#x60;404 NOT FOUND&#x60;.
    *
    * @param request 
    * @return AuthorizationModel
    */
    suspend fun appsResetToken(accessToken: String? = null, clientId: kotlin.String, request: InlineObject5Model): AuthorizationModel

    /**
    * Revoke an installation access token
    *
    * Revokes the installation token you&#39;re using to authenticate as an installation and access this endpoint.  Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \&quot;[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\&quot; endpoint.  You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsRevokeInstallationAccessToken(accessToken: String? = null)

    /**
    * Create a scoped access token
    *
    * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application&#39;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password. Invalid tokens will return &#x60;404 NOT FOUND&#x60;.
    *
    * @param request 
    * @return AuthorizationModel
    */
    suspend fun appsScopeToken(accessToken: String? = null, clientId: kotlin.String, request: InlineObject6Model): AuthorizationModel

    /**
    * Suspend an app installation
    *
    * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account&#39;s resources. When a GitHub App is suspended, the app&#39;s access to the GitHub API or webhook events is blocked for that account.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsSuspendInstallation(accessToken: String? = null, installationId: kotlin.Int)

    /**
    * Unsuspend an app installation
    *
    * Removes a GitHub App installation suspension.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @return void
    */
    suspend fun appsUnsuspendInstallation(accessToken: String? = null, installationId: kotlin.Int)

    /**
    * Update a webhook configuration for an app
    *
    * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \&quot;[Creating a GitHub App](/developers/apps/creating-a-github-app).\&quot;  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    *
    * @param request  (optional)
    * @return WebhookMinusConfigModel
    */
    suspend fun appsUpdateWebhookConfigForApp(accessToken: String? = null, request: InlineObjectModel): WebhookMinusConfigModel

}

class HttpClientAppsApi(private val httpClientProvider: HttpClientProvider) : AppsApi {
    internal val httpClient = httpClientProvider.provide()

    override suspend fun appsAddRepoToInstallationForAuthenticatedUser(accessToken: String?, installationId: kotlin.Int, repositoryId: kotlin.Int) {
        val path = "/user/installations/{installation_id}/repositories/{repository_id}".replace("{"+"installation_id"+"}", "$installationId").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun appsCheckToken(accessToken: String?, clientId: kotlin.String, request: InlineObject3Model): AuthorizationModel {
        val path = "/applications/{client_id}/token".replace("{"+"client_id"+"}", "$clientId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun appsCreateFromManifest(accessToken: String?, code: kotlin.String, request: kotlin.Any): IntegrationModel {
        val path = "/app-manifests/{code}/conversions".replace("{"+"code"+"}", "$code")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun appsCreateInstallationAccessToken(accessToken: String?, installationId: kotlin.Int, request: InlineObject1Model): InstallationMinusTokenModel {
        val path = "/app/installations/{installation_id}/access_tokens".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun appsDeleteAuthorization(accessToken: String?, clientId: kotlin.String, request: InlineObject2Model) {
        val path = "/applications/{client_id}/grant".replace("{"+"client_id"+"}", "$clientId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
            body = request
        }
    }

    override suspend fun appsDeleteInstallation(accessToken: String?, installationId: kotlin.Int) {
        val path = "/app/installations/{installation_id}".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun appsDeleteToken(accessToken: String?, clientId: kotlin.String, request: InlineObject4Model) {
        val path = "/applications/{client_id}/token".replace("{"+"client_id"+"}", "$clientId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
            body = request
        }
    }

    override suspend fun appsGetAuthenticated(accessToken: String?): IntegrationModel {
        val path = "/app"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetBySlug(accessToken: String?, appSlug: kotlin.String): IntegrationModel {
        val path = "/apps/{app_slug}".replace("{"+"app_slug"+"}", "$appSlug")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetInstallation(accessToken: String?, installationId: kotlin.Int): InstallationModel {
        val path = "/app/installations/{installation_id}".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetOrgInstallation(accessToken: String?, org: kotlin.String): InstallationModel {
        val path = "/orgs/{org}/installation".replace("{"+"org"+"}", "$org")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetRepoInstallation(accessToken: String?, owner: kotlin.String, repo: kotlin.String): InstallationModel {
        val path = "/repos/{owner}/{repo}/installation".replace("{"+"owner"+"}", "$owner").replace("{"+"repo"+"}", "$repo")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetSubscriptionPlanForAccount(accessToken: String?, accountId: kotlin.Int): MarketplaceMinusPurchaseModel {
        val path = "/marketplace_listing/accounts/{account_id}".replace("{"+"account_id"+"}", "$accountId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetSubscriptionPlanForAccountStubbed(accessToken: String?, accountId: kotlin.Int): MarketplaceMinusPurchaseModel {
        val path = "/marketplace_listing/stubbed/accounts/{account_id}".replace("{"+"account_id"+"}", "$accountId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetUserInstallation(accessToken: String?, username: kotlin.String): InstallationModel {
        val path = "/users/{username}/installation".replace("{"+"username"+"}", "$username")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsGetWebhookConfigForApp(accessToken: String?): WebhookMinusConfigModel {
        val path = "/app/hook/config"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
        }
    }

    override suspend fun appsListAccountsForPlan(accessToken: String?, planId: kotlin.Int, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MarketplaceMinusPurchaseModel> {
        val path = "/marketplace_listing/plans/{plan_id}/accounts".replace("{"+"plan_id"+"}", "$planId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("sort", sort)
            parameter("direction", direction)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListAccountsForPlanStubbed(accessToken: String?, planId: kotlin.Int, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MarketplaceMinusPurchaseModel> {
        val path = "/marketplace_listing/stubbed/plans/{plan_id}/accounts".replace("{"+"plan_id"+"}", "$planId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("sort", sort)
            parameter("direction", direction)
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListInstallationReposForAuthenticatedUser(accessToken: String?, installationId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20032Model {
        val path = "/user/installations/{installation_id}/repositories".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListInstallations(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?, since: kotlin.String?, outdated: kotlin.String?): kotlin.collections.List<InstallationModel> {
        val path = "/app/installations"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
            parameter("since", since)
            parameter("outdated", outdated)
        }
    }

    override suspend fun appsListInstallationsForAuthenticatedUser(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse20012Model {
        val path = "/user/installations"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListPlans(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MarketplaceMinusListingMinusPlanModel> {
        val path = "/marketplace_listing/plans"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListPlansStubbed(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<MarketplaceMinusListingMinusPlanModel> {
        val path = "/marketplace_listing/stubbed/plans"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListReposAccessibleToInstallation(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): InlineResponse2001Model {
        val path = "/installation/repositories"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListSubscriptionsForAuthenticatedUser(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel> {
        val path = "/user/marketplace_purchases"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsListSubscriptionsForAuthenticatedUserStubbed(accessToken: String?, perPage: kotlin.Int?, page: kotlin.Int?): kotlin.collections.List<UserMinusMarketplaceMinusPurchaseModel> {
        val path = "/user/marketplace_purchases/stubbed"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Get
            parameter("perPage", perPage)
            parameter("page", page)
        }
    }

    override suspend fun appsRedeliverWebhookDelivery(accessToken: String?, deliveryId: kotlin.Int): kotlin.Any {
        val path = "/app/hook/deliveries/{delivery_id}/attempts".replace("{"+"delivery_id"+"}", "$deliveryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
        }
    }

    override suspend fun appsRemoveRepoFromInstallationForAuthenticatedUser(accessToken: String?, installationId: kotlin.Int, repositoryId: kotlin.Int) {
        val path = "/user/installations/{installation_id}/repositories/{repository_id}".replace("{"+"installation_id"+"}", "$installationId").replace("{"+"repository_id"+"}", "$repositoryId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun appsResetToken(accessToken: String?, clientId: kotlin.String, request: InlineObject5Model): AuthorizationModel {
        val path = "/applications/{client_id}/token".replace("{"+"client_id"+"}", "$clientId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

    override suspend fun appsRevokeInstallationAccessToken(accessToken: String?) {
        val path = "/installation/token"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun appsScopeToken(accessToken: String?, clientId: kotlin.String, request: InlineObject6Model): AuthorizationModel {
        val path = "/applications/{client_id}/token/scoped".replace("{"+"client_id"+"}", "$clientId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Post
            body = request
        }
    }

    override suspend fun appsSuspendInstallation(accessToken: String?, installationId: kotlin.Int) {
        val path = "/app/installations/{installation_id}/suspended".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Put
        }
    }

    override suspend fun appsUnsuspendInstallation(accessToken: String?, installationId: kotlin.Int) {
        val path = "/app/installations/{installation_id}/suspended".replace("{"+"installation_id"+"}", "$installationId")

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Delete
        }
    }

    override suspend fun appsUpdateWebhookConfigForApp(accessToken: String?, request: InlineObjectModel): WebhookMinusConfigModel {
        val path = "/app/hook/config"

        return httpClient.request {
            url { encodedPath = path }
            method = HttpMethod.Patch
            body = request
        }
    }

}
